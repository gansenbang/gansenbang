#!/usr/bin/env python
from io.s4.manager.thrift import S4Manager
from io.s4.manager.thrift import constants

from thrift import Thrift
from thrift.transport import TSocket
from thirft.transport import TTransport
from thrift.protocol import TBinaryProtocol

class S4ManagerDriver:
	def __init__(self, host, port):
		try:
			transport = TSocket.TSocket(host,port)
			protocol = TBinaryProtocol.TBinaryProtocol(transport)
			transport.open()
			self.client = S4Manager.Client(protocol);
		except Thrift.TException, tx:
			raise tx

	def GetClient():
		return self.client
	# CreateCluster(self, zkAddress, clustername, machinelist):

	# RemoveCluster(self, clustername):

	# GetAllMachinesList(self, ):

	# GetAllClustersList(self, ):

	# CommitS4ClusterXMLConfig(self, xmlfile, clustername):

	# AddS4Server(self, nodeconfig, clustername, s4clustername, adapterclustername):

	# AddClientAdapter(self, nodeconfig, clustername, s4clustername, listenappname):
	
	# RemoveS4Node(self, clustername, s4clustername, hostport):

	# GetS4ClusterMessage(self, clustername):

	# StartS4ServerCluster(self, clustername, s4clustername, adapterclustername):

	# StartClientAdapterCluster(self, clustername, s4clustername, listenappname):

	# RemoveS4Cluster(self, clustername, s4clustername):

	# RemoveAllS4Cluster(self, clustername):

	# RecoveryS4Server(self, clustername, s4clustername, s4adaptername, hostport):

	# RecoveryClientServer(self, clustername, s4clustername, listenappname, hostport):
