#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ManagerServer
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool CreateCluster(string zkAddress, string clustername,  machinelist)'
  print '  bool RemoveCluster(string clustername)'
  print '   GetAllMachinesList()'
  print '   GetAllClustersList()'
  print '  bool CommitS4ClusterXMLConfig(string xmlfile, string clustername, bool clean,  s4clustersname)'
  print '   GetS4ClusterMessage(string clustername)'
  print '  bool StartS4ServerCluster(string clustername, string s4clustername, string adapterclustername)'
  print '  bool StartClientAdapterCluster(string clustername, string s4clustername, string listenappname)'
  print '  bool RemoveS4Cluster(string clustername, string s4clustername)'
  print '  bool RemoveAllS4Cluster(string clustername)'
  print '  bool RecoveryS4Server(string clustername, string s4clustername, string s4adaptername, string hostport)'
  print '  bool RecoveryClientServer(string clustername, string s4clustername, string listenappname, string hostport)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ManagerServer.Client(protocol)
transport.open()

if cmd == 'CreateCluster':
  if len(args) != 3:
    print 'CreateCluster requires 3 args'
    sys.exit(1)
  pp.pprint(client.CreateCluster(args[0],args[1],eval(args[2]),))

elif cmd == 'RemoveCluster':
  if len(args) != 1:
    print 'RemoveCluster requires 1 args'
    sys.exit(1)
  pp.pprint(client.RemoveCluster(args[0],))

elif cmd == 'GetAllMachinesList':
  if len(args) != 0:
    print 'GetAllMachinesList requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetAllMachinesList())

elif cmd == 'GetAllClustersList':
  if len(args) != 0:
    print 'GetAllClustersList requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetAllClustersList())

elif cmd == 'CommitS4ClusterXMLConfig':
  if len(args) != 4:
    print 'CommitS4ClusterXMLConfig requires 4 args'
    sys.exit(1)
  pp.pprint(client.CommitS4ClusterXMLConfig(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'GetS4ClusterMessage':
  if len(args) != 1:
    print 'GetS4ClusterMessage requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetS4ClusterMessage(args[0],))

elif cmd == 'StartS4ServerCluster':
  if len(args) != 3:
    print 'StartS4ServerCluster requires 3 args'
    sys.exit(1)
  pp.pprint(client.StartS4ServerCluster(args[0],args[1],args[2],))

elif cmd == 'StartClientAdapterCluster':
  if len(args) != 3:
    print 'StartClientAdapterCluster requires 3 args'
    sys.exit(1)
  pp.pprint(client.StartClientAdapterCluster(args[0],args[1],args[2],))

elif cmd == 'RemoveS4Cluster':
  if len(args) != 2:
    print 'RemoveS4Cluster requires 2 args'
    sys.exit(1)
  pp.pprint(client.RemoveS4Cluster(args[0],args[1],))

elif cmd == 'RemoveAllS4Cluster':
  if len(args) != 1:
    print 'RemoveAllS4Cluster requires 1 args'
    sys.exit(1)
  pp.pprint(client.RemoveAllS4Cluster(args[0],))

elif cmd == 'RecoveryS4Server':
  if len(args) != 4:
    print 'RecoveryS4Server requires 4 args'
    sys.exit(1)
  pp.pprint(client.RecoveryS4Server(args[0],args[1],args[2],args[3],))

elif cmd == 'RecoveryClientServer':
  if len(args) != 4:
    print 'RecoveryClientServer requires 4 args'
    sys.exit(1)
  pp.pprint(client.RecoveryClientServer(args[0],args[1],args[2],args[3],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
