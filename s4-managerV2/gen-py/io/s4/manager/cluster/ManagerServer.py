#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def CreateCluster(self, zkAddress, clustername, machinelist):
    """
    Parameters:
     - zkAddress
     - clustername
     - machinelist
    """
    pass

  def RemoveCluster(self, clustername):
    """
    Parameters:
     - clustername
    """
    pass

  def GetAllMachinesList(self, ):
    pass

  def GetAllClustersList(self, ):
    pass

  def CommitS4ClusterXMLConfig(self, xmlfile, clustername, clean, s4clustersname):
    """
    Parameters:
     - xmlfile
     - clustername
     - clean
     - s4clustersname
    """
    pass

  def GetS4ClusterMessage(self, clustername):
    """
    Parameters:
     - clustername
    """
    pass

  def StartS4ServerCluster(self, clustername, s4clustername, adapterclustername):
    """
    Parameters:
     - clustername
     - s4clustername
     - adapterclustername
    """
    pass

  def StartClientAdapterCluster(self, clustername, s4clustername, listenappname):
    """
    Parameters:
     - clustername
     - s4clustername
     - listenappname
    """
    pass

  def RemoveS4Cluster(self, clustername, s4clustername):
    """
    Parameters:
     - clustername
     - s4clustername
    """
    pass

  def RemoveAllS4Cluster(self, clustername):
    """
    Parameters:
     - clustername
    """
    pass

  def RecoveryS4Server(self, clustername, s4clustername, s4adaptername, hostport):
    """
    Parameters:
     - clustername
     - s4clustername
     - s4adaptername
     - hostport
    """
    pass

  def RecoveryClientServer(self, clustername, s4clustername, listenappname, hostport):
    """
    Parameters:
     - clustername
     - s4clustername
     - listenappname
     - hostport
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def CreateCluster(self, zkAddress, clustername, machinelist):
    """
    Parameters:
     - zkAddress
     - clustername
     - machinelist
    """
    self.send_CreateCluster(zkAddress, clustername, machinelist)
    return self.recv_CreateCluster()

  def send_CreateCluster(self, zkAddress, clustername, machinelist):
    self._oprot.writeMessageBegin('CreateCluster', TMessageType.CALL, self._seqid)
    args = CreateCluster_args()
    args.zkAddress = zkAddress
    args.clustername = clustername
    args.machinelist = machinelist
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CreateCluster(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = CreateCluster_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "CreateCluster failed: unknown result");

  def RemoveCluster(self, clustername):
    """
    Parameters:
     - clustername
    """
    self.send_RemoveCluster(clustername)
    return self.recv_RemoveCluster()

  def send_RemoveCluster(self, clustername):
    self._oprot.writeMessageBegin('RemoveCluster', TMessageType.CALL, self._seqid)
    args = RemoveCluster_args()
    args.clustername = clustername
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RemoveCluster(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RemoveCluster_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "RemoveCluster failed: unknown result");

  def GetAllMachinesList(self, ):
    self.send_GetAllMachinesList()
    return self.recv_GetAllMachinesList()

  def send_GetAllMachinesList(self, ):
    self._oprot.writeMessageBegin('GetAllMachinesList', TMessageType.CALL, self._seqid)
    args = GetAllMachinesList_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetAllMachinesList(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetAllMachinesList_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAllMachinesList failed: unknown result");

  def GetAllClustersList(self, ):
    self.send_GetAllClustersList()
    return self.recv_GetAllClustersList()

  def send_GetAllClustersList(self, ):
    self._oprot.writeMessageBegin('GetAllClustersList', TMessageType.CALL, self._seqid)
    args = GetAllClustersList_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetAllClustersList(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetAllClustersList_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAllClustersList failed: unknown result");

  def CommitS4ClusterXMLConfig(self, xmlfile, clustername, clean, s4clustersname):
    """
    Parameters:
     - xmlfile
     - clustername
     - clean
     - s4clustersname
    """
    self.send_CommitS4ClusterXMLConfig(xmlfile, clustername, clean, s4clustersname)
    return self.recv_CommitS4ClusterXMLConfig()

  def send_CommitS4ClusterXMLConfig(self, xmlfile, clustername, clean, s4clustersname):
    self._oprot.writeMessageBegin('CommitS4ClusterXMLConfig', TMessageType.CALL, self._seqid)
    args = CommitS4ClusterXMLConfig_args()
    args.xmlfile = xmlfile
    args.clustername = clustername
    args.clean = clean
    args.s4clustersname = s4clustersname
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CommitS4ClusterXMLConfig(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = CommitS4ClusterXMLConfig_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "CommitS4ClusterXMLConfig failed: unknown result");

  def GetS4ClusterMessage(self, clustername):
    """
    Parameters:
     - clustername
    """
    self.send_GetS4ClusterMessage(clustername)
    return self.recv_GetS4ClusterMessage()

  def send_GetS4ClusterMessage(self, clustername):
    self._oprot.writeMessageBegin('GetS4ClusterMessage', TMessageType.CALL, self._seqid)
    args = GetS4ClusterMessage_args()
    args.clustername = clustername
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetS4ClusterMessage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetS4ClusterMessage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetS4ClusterMessage failed: unknown result");

  def StartS4ServerCluster(self, clustername, s4clustername, adapterclustername):
    """
    Parameters:
     - clustername
     - s4clustername
     - adapterclustername
    """
    self.send_StartS4ServerCluster(clustername, s4clustername, adapterclustername)
    return self.recv_StartS4ServerCluster()

  def send_StartS4ServerCluster(self, clustername, s4clustername, adapterclustername):
    self._oprot.writeMessageBegin('StartS4ServerCluster', TMessageType.CALL, self._seqid)
    args = StartS4ServerCluster_args()
    args.clustername = clustername
    args.s4clustername = s4clustername
    args.adapterclustername = adapterclustername
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_StartS4ServerCluster(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = StartS4ServerCluster_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "StartS4ServerCluster failed: unknown result");

  def StartClientAdapterCluster(self, clustername, s4clustername, listenappname):
    """
    Parameters:
     - clustername
     - s4clustername
     - listenappname
    """
    self.send_StartClientAdapterCluster(clustername, s4clustername, listenappname)
    return self.recv_StartClientAdapterCluster()

  def send_StartClientAdapterCluster(self, clustername, s4clustername, listenappname):
    self._oprot.writeMessageBegin('StartClientAdapterCluster', TMessageType.CALL, self._seqid)
    args = StartClientAdapterCluster_args()
    args.clustername = clustername
    args.s4clustername = s4clustername
    args.listenappname = listenappname
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_StartClientAdapterCluster(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = StartClientAdapterCluster_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "StartClientAdapterCluster failed: unknown result");

  def RemoveS4Cluster(self, clustername, s4clustername):
    """
    Parameters:
     - clustername
     - s4clustername
    """
    self.send_RemoveS4Cluster(clustername, s4clustername)
    return self.recv_RemoveS4Cluster()

  def send_RemoveS4Cluster(self, clustername, s4clustername):
    self._oprot.writeMessageBegin('RemoveS4Cluster', TMessageType.CALL, self._seqid)
    args = RemoveS4Cluster_args()
    args.clustername = clustername
    args.s4clustername = s4clustername
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RemoveS4Cluster(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RemoveS4Cluster_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "RemoveS4Cluster failed: unknown result");

  def RemoveAllS4Cluster(self, clustername):
    """
    Parameters:
     - clustername
    """
    self.send_RemoveAllS4Cluster(clustername)
    return self.recv_RemoveAllS4Cluster()

  def send_RemoveAllS4Cluster(self, clustername):
    self._oprot.writeMessageBegin('RemoveAllS4Cluster', TMessageType.CALL, self._seqid)
    args = RemoveAllS4Cluster_args()
    args.clustername = clustername
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RemoveAllS4Cluster(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RemoveAllS4Cluster_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "RemoveAllS4Cluster failed: unknown result");

  def RecoveryS4Server(self, clustername, s4clustername, s4adaptername, hostport):
    """
    Parameters:
     - clustername
     - s4clustername
     - s4adaptername
     - hostport
    """
    self.send_RecoveryS4Server(clustername, s4clustername, s4adaptername, hostport)
    return self.recv_RecoveryS4Server()

  def send_RecoveryS4Server(self, clustername, s4clustername, s4adaptername, hostport):
    self._oprot.writeMessageBegin('RecoveryS4Server', TMessageType.CALL, self._seqid)
    args = RecoveryS4Server_args()
    args.clustername = clustername
    args.s4clustername = s4clustername
    args.s4adaptername = s4adaptername
    args.hostport = hostport
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RecoveryS4Server(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RecoveryS4Server_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "RecoveryS4Server failed: unknown result");

  def RecoveryClientServer(self, clustername, s4clustername, listenappname, hostport):
    """
    Parameters:
     - clustername
     - s4clustername
     - listenappname
     - hostport
    """
    self.send_RecoveryClientServer(clustername, s4clustername, listenappname, hostport)
    return self.recv_RecoveryClientServer()

  def send_RecoveryClientServer(self, clustername, s4clustername, listenappname, hostport):
    self._oprot.writeMessageBegin('RecoveryClientServer', TMessageType.CALL, self._seqid)
    args = RecoveryClientServer_args()
    args.clustername = clustername
    args.s4clustername = s4clustername
    args.listenappname = listenappname
    args.hostport = hostport
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_RecoveryClientServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = RecoveryClientServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "RecoveryClientServer failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["CreateCluster"] = Processor.process_CreateCluster
    self._processMap["RemoveCluster"] = Processor.process_RemoveCluster
    self._processMap["GetAllMachinesList"] = Processor.process_GetAllMachinesList
    self._processMap["GetAllClustersList"] = Processor.process_GetAllClustersList
    self._processMap["CommitS4ClusterXMLConfig"] = Processor.process_CommitS4ClusterXMLConfig
    self._processMap["GetS4ClusterMessage"] = Processor.process_GetS4ClusterMessage
    self._processMap["StartS4ServerCluster"] = Processor.process_StartS4ServerCluster
    self._processMap["StartClientAdapterCluster"] = Processor.process_StartClientAdapterCluster
    self._processMap["RemoveS4Cluster"] = Processor.process_RemoveS4Cluster
    self._processMap["RemoveAllS4Cluster"] = Processor.process_RemoveAllS4Cluster
    self._processMap["RecoveryS4Server"] = Processor.process_RecoveryS4Server
    self._processMap["RecoveryClientServer"] = Processor.process_RecoveryClientServer

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_CreateCluster(self, seqid, iprot, oprot):
    args = CreateCluster_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CreateCluster_result()
    result.success = self._handler.CreateCluster(args.zkAddress, args.clustername, args.machinelist)
    oprot.writeMessageBegin("CreateCluster", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RemoveCluster(self, seqid, iprot, oprot):
    args = RemoveCluster_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RemoveCluster_result()
    result.success = self._handler.RemoveCluster(args.clustername)
    oprot.writeMessageBegin("RemoveCluster", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetAllMachinesList(self, seqid, iprot, oprot):
    args = GetAllMachinesList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetAllMachinesList_result()
    result.success = self._handler.GetAllMachinesList()
    oprot.writeMessageBegin("GetAllMachinesList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetAllClustersList(self, seqid, iprot, oprot):
    args = GetAllClustersList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetAllClustersList_result()
    result.success = self._handler.GetAllClustersList()
    oprot.writeMessageBegin("GetAllClustersList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_CommitS4ClusterXMLConfig(self, seqid, iprot, oprot):
    args = CommitS4ClusterXMLConfig_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CommitS4ClusterXMLConfig_result()
    result.success = self._handler.CommitS4ClusterXMLConfig(args.xmlfile, args.clustername, args.clean, args.s4clustersname)
    oprot.writeMessageBegin("CommitS4ClusterXMLConfig", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetS4ClusterMessage(self, seqid, iprot, oprot):
    args = GetS4ClusterMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetS4ClusterMessage_result()
    result.success = self._handler.GetS4ClusterMessage(args.clustername)
    oprot.writeMessageBegin("GetS4ClusterMessage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_StartS4ServerCluster(self, seqid, iprot, oprot):
    args = StartS4ServerCluster_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = StartS4ServerCluster_result()
    result.success = self._handler.StartS4ServerCluster(args.clustername, args.s4clustername, args.adapterclustername)
    oprot.writeMessageBegin("StartS4ServerCluster", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_StartClientAdapterCluster(self, seqid, iprot, oprot):
    args = StartClientAdapterCluster_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = StartClientAdapterCluster_result()
    result.success = self._handler.StartClientAdapterCluster(args.clustername, args.s4clustername, args.listenappname)
    oprot.writeMessageBegin("StartClientAdapterCluster", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RemoveS4Cluster(self, seqid, iprot, oprot):
    args = RemoveS4Cluster_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RemoveS4Cluster_result()
    result.success = self._handler.RemoveS4Cluster(args.clustername, args.s4clustername)
    oprot.writeMessageBegin("RemoveS4Cluster", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RemoveAllS4Cluster(self, seqid, iprot, oprot):
    args = RemoveAllS4Cluster_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RemoveAllS4Cluster_result()
    result.success = self._handler.RemoveAllS4Cluster(args.clustername)
    oprot.writeMessageBegin("RemoveAllS4Cluster", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RecoveryS4Server(self, seqid, iprot, oprot):
    args = RecoveryS4Server_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RecoveryS4Server_result()
    result.success = self._handler.RecoveryS4Server(args.clustername, args.s4clustername, args.s4adaptername, args.hostport)
    oprot.writeMessageBegin("RecoveryS4Server", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_RecoveryClientServer(self, seqid, iprot, oprot):
    args = RecoveryClientServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = RecoveryClientServer_result()
    result.success = self._handler.RecoveryClientServer(args.clustername, args.s4clustername, args.listenappname, args.hostport)
    oprot.writeMessageBegin("RecoveryClientServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class CreateCluster_args:
  """
  Attributes:
   - zkAddress
   - clustername
   - machinelist
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'zkAddress', None, None, ), # 1
    (2, TType.STRING, 'clustername', None, None, ), # 2
    (3, TType.LIST, 'machinelist', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, zkAddress=None, clustername=None, machinelist=None,):
    self.zkAddress = zkAddress
    self.clustername = clustername
    self.machinelist = machinelist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.zkAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.machinelist = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.machinelist.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateCluster_args')
    if self.zkAddress is not None:
      oprot.writeFieldBegin('zkAddress', TType.STRING, 1)
      oprot.writeString(self.zkAddress)
      oprot.writeFieldEnd()
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 2)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.machinelist is not None:
      oprot.writeFieldBegin('machinelist', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.machinelist))
      for iter6 in self.machinelist:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateCluster_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateCluster_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveCluster_args:
  """
  Attributes:
   - clustername
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
  )

  def __init__(self, clustername=None,):
    self.clustername = clustername

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveCluster_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveCluster_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveCluster_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetAllMachinesList_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAllMachinesList_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetAllMachinesList_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Machine, Machine.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Machine()
            _elem12.read(iprot)
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAllMachinesList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter13 in self.success:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetAllClustersList_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAllClustersList_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetAllClustersList_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Cluster, Cluster.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = Cluster()
            _elem19.read(iprot)
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAllClustersList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter20 in self.success:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommitS4ClusterXMLConfig_args:
  """
  Attributes:
   - xmlfile
   - clustername
   - clean
   - s4clustersname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'xmlfile', None, None, ), # 1
    (2, TType.STRING, 'clustername', None, None, ), # 2
    (3, TType.BOOL, 'clean', None, None, ), # 3
    (4, TType.LIST, 's4clustersname', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, xmlfile=None, clustername=None, clean=None, s4clustersname=None,):
    self.xmlfile = xmlfile
    self.clustername = clustername
    self.clean = clean
    self.s4clustersname = s4clustersname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.xmlfile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.clean = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.s4clustersname = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.s4clustersname.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommitS4ClusterXMLConfig_args')
    if self.xmlfile is not None:
      oprot.writeFieldBegin('xmlfile', TType.STRING, 1)
      oprot.writeString(self.xmlfile)
      oprot.writeFieldEnd()
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 2)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.clean is not None:
      oprot.writeFieldBegin('clean', TType.BOOL, 3)
      oprot.writeBool(self.clean)
      oprot.writeFieldEnd()
    if self.s4clustersname is not None:
      oprot.writeFieldBegin('s4clustersname', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.s4clustersname))
      for iter27 in self.s4clustersname:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommitS4ClusterXMLConfig_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommitS4ClusterXMLConfig_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetS4ClusterMessage_args:
  """
  Attributes:
   - clustername
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
  )

  def __init__(self, clustername=None,):
    self.clustername = clustername

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetS4ClusterMessage_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetS4ClusterMessage_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype29, _vtype30, _size28 ) = iprot.readMapBegin() 
          for _i32 in xrange(_size28):
            _key33 = iprot.readString();
            _val34 = {}
            (_ktype36, _vtype37, _size35 ) = iprot.readMapBegin() 
            for _i39 in xrange(_size35):
              _key40 = iprot.readString();
              _val41 = iprot.readString();
              _val34[_key40] = _val41
            iprot.readMapEnd()
            self.success[_key33] = _val34
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetS4ClusterMessage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter42,viter43 in self.success.items():
        oprot.writeString(kiter42)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter43))
        for kiter44,viter45 in viter43.items():
          oprot.writeString(kiter44)
          oprot.writeString(viter45)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartS4ServerCluster_args:
  """
  Attributes:
   - clustername
   - s4clustername
   - adapterclustername
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
    (2, TType.STRING, 's4clustername', None, None, ), # 2
    (3, TType.STRING, 'adapterclustername', None, None, ), # 3
  )

  def __init__(self, clustername=None, s4clustername=None, adapterclustername=None,):
    self.clustername = clustername
    self.s4clustername = s4clustername
    self.adapterclustername = adapterclustername

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s4clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.adapterclustername = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartS4ServerCluster_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.s4clustername is not None:
      oprot.writeFieldBegin('s4clustername', TType.STRING, 2)
      oprot.writeString(self.s4clustername)
      oprot.writeFieldEnd()
    if self.adapterclustername is not None:
      oprot.writeFieldBegin('adapterclustername', TType.STRING, 3)
      oprot.writeString(self.adapterclustername)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartS4ServerCluster_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartS4ServerCluster_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartClientAdapterCluster_args:
  """
  Attributes:
   - clustername
   - s4clustername
   - listenappname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
    (2, TType.STRING, 's4clustername', None, None, ), # 2
    (3, TType.STRING, 'listenappname', None, None, ), # 3
  )

  def __init__(self, clustername=None, s4clustername=None, listenappname=None,):
    self.clustername = clustername
    self.s4clustername = s4clustername
    self.listenappname = listenappname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s4clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.listenappname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartClientAdapterCluster_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.s4clustername is not None:
      oprot.writeFieldBegin('s4clustername', TType.STRING, 2)
      oprot.writeString(self.s4clustername)
      oprot.writeFieldEnd()
    if self.listenappname is not None:
      oprot.writeFieldBegin('listenappname', TType.STRING, 3)
      oprot.writeString(self.listenappname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartClientAdapterCluster_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartClientAdapterCluster_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveS4Cluster_args:
  """
  Attributes:
   - clustername
   - s4clustername
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
    (2, TType.STRING, 's4clustername', None, None, ), # 2
  )

  def __init__(self, clustername=None, s4clustername=None,):
    self.clustername = clustername
    self.s4clustername = s4clustername

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s4clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveS4Cluster_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.s4clustername is not None:
      oprot.writeFieldBegin('s4clustername', TType.STRING, 2)
      oprot.writeString(self.s4clustername)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveS4Cluster_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveS4Cluster_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveAllS4Cluster_args:
  """
  Attributes:
   - clustername
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
  )

  def __init__(self, clustername=None,):
    self.clustername = clustername

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveAllS4Cluster_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveAllS4Cluster_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveAllS4Cluster_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecoveryS4Server_args:
  """
  Attributes:
   - clustername
   - s4clustername
   - s4adaptername
   - hostport
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
    (2, TType.STRING, 's4clustername', None, None, ), # 2
    (3, TType.STRING, 's4adaptername', None, None, ), # 3
    (4, TType.STRING, 'hostport', None, None, ), # 4
  )

  def __init__(self, clustername=None, s4clustername=None, s4adaptername=None, hostport=None,):
    self.clustername = clustername
    self.s4clustername = s4clustername
    self.s4adaptername = s4adaptername
    self.hostport = hostport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s4clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.s4adaptername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hostport = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecoveryS4Server_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.s4clustername is not None:
      oprot.writeFieldBegin('s4clustername', TType.STRING, 2)
      oprot.writeString(self.s4clustername)
      oprot.writeFieldEnd()
    if self.s4adaptername is not None:
      oprot.writeFieldBegin('s4adaptername', TType.STRING, 3)
      oprot.writeString(self.s4adaptername)
      oprot.writeFieldEnd()
    if self.hostport is not None:
      oprot.writeFieldBegin('hostport', TType.STRING, 4)
      oprot.writeString(self.hostport)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecoveryS4Server_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecoveryS4Server_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecoveryClientServer_args:
  """
  Attributes:
   - clustername
   - s4clustername
   - listenappname
   - hostport
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clustername', None, None, ), # 1
    (2, TType.STRING, 's4clustername', None, None, ), # 2
    (3, TType.STRING, 'listenappname', None, None, ), # 3
    (4, TType.STRING, 'hostport', None, None, ), # 4
  )

  def __init__(self, clustername=None, s4clustername=None, listenappname=None, hostport=None,):
    self.clustername = clustername
    self.s4clustername = s4clustername
    self.listenappname = listenappname
    self.hostport = hostport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s4clustername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.listenappname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hostport = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecoveryClientServer_args')
    if self.clustername is not None:
      oprot.writeFieldBegin('clustername', TType.STRING, 1)
      oprot.writeString(self.clustername)
      oprot.writeFieldEnd()
    if self.s4clustername is not None:
      oprot.writeFieldBegin('s4clustername', TType.STRING, 2)
      oprot.writeString(self.s4clustername)
      oprot.writeFieldEnd()
    if self.listenappname is not None:
      oprot.writeFieldBegin('listenappname', TType.STRING, 3)
      oprot.writeString(self.listenappname)
      oprot.writeFieldEnd()
    if self.hostport is not None:
      oprot.writeFieldBegin('hostport', TType.STRING, 4)
      oprot.writeString(self.hostport)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecoveryClientServer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecoveryClientServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
