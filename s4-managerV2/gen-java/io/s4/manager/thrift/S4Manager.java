/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.s4.manager.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class S4Manager {

  public interface Iface {

    public boolean CreateCluster(String zkAddress, String clustername, List<String> machinelist) throws org.apache.thrift.TException;

    public boolean RemoveCluster(String clustername) throws org.apache.thrift.TException;

    public List<Machine> GetAllMachinesList() throws org.apache.thrift.TException;

    public List<Cluster> GetAllClustersList() throws org.apache.thrift.TException;

    public boolean CommitS4ClusterXMLConfig(String xmlfile, String clustername) throws org.apache.thrift.TException;

    public boolean AddS4Server(String nodeconfig, String clustername, String s4clustername, String adapterclustername) throws org.apache.thrift.TException;

    public boolean AddClientAdapter(String nodeconfig, String clustername, String s4clustername, String listenappname) throws org.apache.thrift.TException;

    public boolean RemoveS4Node(String clustername, String s4clustername, String hostport) throws org.apache.thrift.TException;

    public Map<String,Map<String,String>> GetS4ClusterMessage(String clustername) throws org.apache.thrift.TException;

    public boolean StartS4ServerCluster(String clustername, String s4clustername, String adapterclustername) throws org.apache.thrift.TException;

    public boolean StartClientAdapterCluster(String clustername, String s4clustername, String listenappname) throws org.apache.thrift.TException;

    public boolean RemoveS4Cluster(String clustername, String s4clustername) throws org.apache.thrift.TException;

    public boolean RemoveAllS4Cluster(String clustername) throws org.apache.thrift.TException;

    public boolean RecoveryS4Server(String clustername, String s4clustername, String s4adaptername, String hostport) throws org.apache.thrift.TException;

    public boolean RecoveryClientServer(String clustername, String s4clustername, String listenappname, String hostport) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CreateCluster(String zkAddress, String clustername, List<String> machinelist, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CreateCluster_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveCluster(String clustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveCluster_call> resultHandler) throws org.apache.thrift.TException;

    public void GetAllMachinesList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAllMachinesList_call> resultHandler) throws org.apache.thrift.TException;

    public void GetAllClustersList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAllClustersList_call> resultHandler) throws org.apache.thrift.TException;

    public void CommitS4ClusterXMLConfig(String xmlfile, String clustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CommitS4ClusterXMLConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void AddS4Server(String nodeconfig, String clustername, String s4clustername, String adapterclustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddS4Server_call> resultHandler) throws org.apache.thrift.TException;

    public void AddClientAdapter(String nodeconfig, String clustername, String s4clustername, String listenappname, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddClientAdapter_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveS4Node(String clustername, String s4clustername, String hostport, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveS4Node_call> resultHandler) throws org.apache.thrift.TException;

    public void GetS4ClusterMessage(String clustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetS4ClusterMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void StartS4ServerCluster(String clustername, String s4clustername, String adapterclustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.StartS4ServerCluster_call> resultHandler) throws org.apache.thrift.TException;

    public void StartClientAdapterCluster(String clustername, String s4clustername, String listenappname, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.StartClientAdapterCluster_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveS4Cluster(String clustername, String s4clustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveS4Cluster_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveAllS4Cluster(String clustername, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveAllS4Cluster_call> resultHandler) throws org.apache.thrift.TException;

    public void RecoveryS4Server(String clustername, String s4clustername, String s4adaptername, String hostport, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecoveryS4Server_call> resultHandler) throws org.apache.thrift.TException;

    public void RecoveryClientServer(String clustername, String s4clustername, String listenappname, String hostport, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecoveryClientServer_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean CreateCluster(String zkAddress, String clustername, List<String> machinelist) throws org.apache.thrift.TException
    {
      send_CreateCluster(zkAddress, clustername, machinelist);
      return recv_CreateCluster();
    }

    public void send_CreateCluster(String zkAddress, String clustername, List<String> machinelist) throws org.apache.thrift.TException
    {
      CreateCluster_args args = new CreateCluster_args();
      args.setZkAddress(zkAddress);
      args.setClustername(clustername);
      args.setMachinelist(machinelist);
      sendBase("CreateCluster", args);
    }

    public boolean recv_CreateCluster() throws org.apache.thrift.TException
    {
      CreateCluster_result result = new CreateCluster_result();
      receiveBase(result, "CreateCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateCluster failed: unknown result");
    }

    public boolean RemoveCluster(String clustername) throws org.apache.thrift.TException
    {
      send_RemoveCluster(clustername);
      return recv_RemoveCluster();
    }

    public void send_RemoveCluster(String clustername) throws org.apache.thrift.TException
    {
      RemoveCluster_args args = new RemoveCluster_args();
      args.setClustername(clustername);
      sendBase("RemoveCluster", args);
    }

    public boolean recv_RemoveCluster() throws org.apache.thrift.TException
    {
      RemoveCluster_result result = new RemoveCluster_result();
      receiveBase(result, "RemoveCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveCluster failed: unknown result");
    }

    public List<Machine> GetAllMachinesList() throws org.apache.thrift.TException
    {
      send_GetAllMachinesList();
      return recv_GetAllMachinesList();
    }

    public void send_GetAllMachinesList() throws org.apache.thrift.TException
    {
      GetAllMachinesList_args args = new GetAllMachinesList_args();
      sendBase("GetAllMachinesList", args);
    }

    public List<Machine> recv_GetAllMachinesList() throws org.apache.thrift.TException
    {
      GetAllMachinesList_result result = new GetAllMachinesList_result();
      receiveBase(result, "GetAllMachinesList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllMachinesList failed: unknown result");
    }

    public List<Cluster> GetAllClustersList() throws org.apache.thrift.TException
    {
      send_GetAllClustersList();
      return recv_GetAllClustersList();
    }

    public void send_GetAllClustersList() throws org.apache.thrift.TException
    {
      GetAllClustersList_args args = new GetAllClustersList_args();
      sendBase("GetAllClustersList", args);
    }

    public List<Cluster> recv_GetAllClustersList() throws org.apache.thrift.TException
    {
      GetAllClustersList_result result = new GetAllClustersList_result();
      receiveBase(result, "GetAllClustersList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllClustersList failed: unknown result");
    }

    public boolean CommitS4ClusterXMLConfig(String xmlfile, String clustername) throws org.apache.thrift.TException
    {
      send_CommitS4ClusterXMLConfig(xmlfile, clustername);
      return recv_CommitS4ClusterXMLConfig();
    }

    public void send_CommitS4ClusterXMLConfig(String xmlfile, String clustername) throws org.apache.thrift.TException
    {
      CommitS4ClusterXMLConfig_args args = new CommitS4ClusterXMLConfig_args();
      args.setXmlfile(xmlfile);
      args.setClustername(clustername);
      sendBase("CommitS4ClusterXMLConfig", args);
    }

    public boolean recv_CommitS4ClusterXMLConfig() throws org.apache.thrift.TException
    {
      CommitS4ClusterXMLConfig_result result = new CommitS4ClusterXMLConfig_result();
      receiveBase(result, "CommitS4ClusterXMLConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CommitS4ClusterXMLConfig failed: unknown result");
    }

    public boolean AddS4Server(String nodeconfig, String clustername, String s4clustername, String adapterclustername) throws org.apache.thrift.TException
    {
      send_AddS4Server(nodeconfig, clustername, s4clustername, adapterclustername);
      return recv_AddS4Server();
    }

    public void send_AddS4Server(String nodeconfig, String clustername, String s4clustername, String adapterclustername) throws org.apache.thrift.TException
    {
      AddS4Server_args args = new AddS4Server_args();
      args.setNodeconfig(nodeconfig);
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setAdapterclustername(adapterclustername);
      sendBase("AddS4Server", args);
    }

    public boolean recv_AddS4Server() throws org.apache.thrift.TException
    {
      AddS4Server_result result = new AddS4Server_result();
      receiveBase(result, "AddS4Server");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddS4Server failed: unknown result");
    }

    public boolean AddClientAdapter(String nodeconfig, String clustername, String s4clustername, String listenappname) throws org.apache.thrift.TException
    {
      send_AddClientAdapter(nodeconfig, clustername, s4clustername, listenappname);
      return recv_AddClientAdapter();
    }

    public void send_AddClientAdapter(String nodeconfig, String clustername, String s4clustername, String listenappname) throws org.apache.thrift.TException
    {
      AddClientAdapter_args args = new AddClientAdapter_args();
      args.setNodeconfig(nodeconfig);
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setListenappname(listenappname);
      sendBase("AddClientAdapter", args);
    }

    public boolean recv_AddClientAdapter() throws org.apache.thrift.TException
    {
      AddClientAdapter_result result = new AddClientAdapter_result();
      receiveBase(result, "AddClientAdapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddClientAdapter failed: unknown result");
    }

    public boolean RemoveS4Node(String clustername, String s4clustername, String hostport) throws org.apache.thrift.TException
    {
      send_RemoveS4Node(clustername, s4clustername, hostport);
      return recv_RemoveS4Node();
    }

    public void send_RemoveS4Node(String clustername, String s4clustername, String hostport) throws org.apache.thrift.TException
    {
      RemoveS4Node_args args = new RemoveS4Node_args();
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setHostport(hostport);
      sendBase("RemoveS4Node", args);
    }

    public boolean recv_RemoveS4Node() throws org.apache.thrift.TException
    {
      RemoveS4Node_result result = new RemoveS4Node_result();
      receiveBase(result, "RemoveS4Node");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveS4Node failed: unknown result");
    }

    public Map<String,Map<String,String>> GetS4ClusterMessage(String clustername) throws org.apache.thrift.TException
    {
      send_GetS4ClusterMessage(clustername);
      return recv_GetS4ClusterMessage();
    }

    public void send_GetS4ClusterMessage(String clustername) throws org.apache.thrift.TException
    {
      GetS4ClusterMessage_args args = new GetS4ClusterMessage_args();
      args.setClustername(clustername);
      sendBase("GetS4ClusterMessage", args);
    }

    public Map<String,Map<String,String>> recv_GetS4ClusterMessage() throws org.apache.thrift.TException
    {
      GetS4ClusterMessage_result result = new GetS4ClusterMessage_result();
      receiveBase(result, "GetS4ClusterMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetS4ClusterMessage failed: unknown result");
    }

    public boolean StartS4ServerCluster(String clustername, String s4clustername, String adapterclustername) throws org.apache.thrift.TException
    {
      send_StartS4ServerCluster(clustername, s4clustername, adapterclustername);
      return recv_StartS4ServerCluster();
    }

    public void send_StartS4ServerCluster(String clustername, String s4clustername, String adapterclustername) throws org.apache.thrift.TException
    {
      StartS4ServerCluster_args args = new StartS4ServerCluster_args();
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setAdapterclustername(adapterclustername);
      sendBase("StartS4ServerCluster", args);
    }

    public boolean recv_StartS4ServerCluster() throws org.apache.thrift.TException
    {
      StartS4ServerCluster_result result = new StartS4ServerCluster_result();
      receiveBase(result, "StartS4ServerCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "StartS4ServerCluster failed: unknown result");
    }

    public boolean StartClientAdapterCluster(String clustername, String s4clustername, String listenappname) throws org.apache.thrift.TException
    {
      send_StartClientAdapterCluster(clustername, s4clustername, listenappname);
      return recv_StartClientAdapterCluster();
    }

    public void send_StartClientAdapterCluster(String clustername, String s4clustername, String listenappname) throws org.apache.thrift.TException
    {
      StartClientAdapterCluster_args args = new StartClientAdapterCluster_args();
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setListenappname(listenappname);
      sendBase("StartClientAdapterCluster", args);
    }

    public boolean recv_StartClientAdapterCluster() throws org.apache.thrift.TException
    {
      StartClientAdapterCluster_result result = new StartClientAdapterCluster_result();
      receiveBase(result, "StartClientAdapterCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "StartClientAdapterCluster failed: unknown result");
    }

    public boolean RemoveS4Cluster(String clustername, String s4clustername) throws org.apache.thrift.TException
    {
      send_RemoveS4Cluster(clustername, s4clustername);
      return recv_RemoveS4Cluster();
    }

    public void send_RemoveS4Cluster(String clustername, String s4clustername) throws org.apache.thrift.TException
    {
      RemoveS4Cluster_args args = new RemoveS4Cluster_args();
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      sendBase("RemoveS4Cluster", args);
    }

    public boolean recv_RemoveS4Cluster() throws org.apache.thrift.TException
    {
      RemoveS4Cluster_result result = new RemoveS4Cluster_result();
      receiveBase(result, "RemoveS4Cluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveS4Cluster failed: unknown result");
    }

    public boolean RemoveAllS4Cluster(String clustername) throws org.apache.thrift.TException
    {
      send_RemoveAllS4Cluster(clustername);
      return recv_RemoveAllS4Cluster();
    }

    public void send_RemoveAllS4Cluster(String clustername) throws org.apache.thrift.TException
    {
      RemoveAllS4Cluster_args args = new RemoveAllS4Cluster_args();
      args.setClustername(clustername);
      sendBase("RemoveAllS4Cluster", args);
    }

    public boolean recv_RemoveAllS4Cluster() throws org.apache.thrift.TException
    {
      RemoveAllS4Cluster_result result = new RemoveAllS4Cluster_result();
      receiveBase(result, "RemoveAllS4Cluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveAllS4Cluster failed: unknown result");
    }

    public boolean RecoveryS4Server(String clustername, String s4clustername, String s4adaptername, String hostport) throws org.apache.thrift.TException
    {
      send_RecoveryS4Server(clustername, s4clustername, s4adaptername, hostport);
      return recv_RecoveryS4Server();
    }

    public void send_RecoveryS4Server(String clustername, String s4clustername, String s4adaptername, String hostport) throws org.apache.thrift.TException
    {
      RecoveryS4Server_args args = new RecoveryS4Server_args();
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setS4adaptername(s4adaptername);
      args.setHostport(hostport);
      sendBase("RecoveryS4Server", args);
    }

    public boolean recv_RecoveryS4Server() throws org.apache.thrift.TException
    {
      RecoveryS4Server_result result = new RecoveryS4Server_result();
      receiveBase(result, "RecoveryS4Server");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecoveryS4Server failed: unknown result");
    }

    public boolean RecoveryClientServer(String clustername, String s4clustername, String listenappname, String hostport) throws org.apache.thrift.TException
    {
      send_RecoveryClientServer(clustername, s4clustername, listenappname, hostport);
      return recv_RecoveryClientServer();
    }

    public void send_RecoveryClientServer(String clustername, String s4clustername, String listenappname, String hostport) throws org.apache.thrift.TException
    {
      RecoveryClientServer_args args = new RecoveryClientServer_args();
      args.setClustername(clustername);
      args.setS4clustername(s4clustername);
      args.setListenappname(listenappname);
      args.setHostport(hostport);
      sendBase("RecoveryClientServer", args);
    }

    public boolean recv_RecoveryClientServer() throws org.apache.thrift.TException
    {
      RecoveryClientServer_result result = new RecoveryClientServer_result();
      receiveBase(result, "RecoveryClientServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecoveryClientServer failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CreateCluster(String zkAddress, String clustername, List<String> machinelist, org.apache.thrift.async.AsyncMethodCallback<CreateCluster_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateCluster_call method_call = new CreateCluster_call(zkAddress, clustername, machinelist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateCluster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String zkAddress;
      private String clustername;
      private List<String> machinelist;
      public CreateCluster_call(String zkAddress, String clustername, List<String> machinelist, org.apache.thrift.async.AsyncMethodCallback<CreateCluster_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zkAddress = zkAddress;
        this.clustername = clustername;
        this.machinelist = machinelist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateCluster_args args = new CreateCluster_args();
        args.setZkAddress(zkAddress);
        args.setClustername(clustername);
        args.setMachinelist(machinelist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateCluster();
      }
    }

    public void RemoveCluster(String clustername, org.apache.thrift.async.AsyncMethodCallback<RemoveCluster_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveCluster_call method_call = new RemoveCluster_call(clustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveCluster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      public RemoveCluster_call(String clustername, org.apache.thrift.async.AsyncMethodCallback<RemoveCluster_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveCluster_args args = new RemoveCluster_args();
        args.setClustername(clustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveCluster();
      }
    }

    public void GetAllMachinesList(org.apache.thrift.async.AsyncMethodCallback<GetAllMachinesList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAllMachinesList_call method_call = new GetAllMachinesList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllMachinesList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAllMachinesList_call(org.apache.thrift.async.AsyncMethodCallback<GetAllMachinesList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllMachinesList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllMachinesList_args args = new GetAllMachinesList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Machine> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllMachinesList();
      }
    }

    public void GetAllClustersList(org.apache.thrift.async.AsyncMethodCallback<GetAllClustersList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAllClustersList_call method_call = new GetAllClustersList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllClustersList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAllClustersList_call(org.apache.thrift.async.AsyncMethodCallback<GetAllClustersList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllClustersList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllClustersList_args args = new GetAllClustersList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cluster> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllClustersList();
      }
    }

    public void CommitS4ClusterXMLConfig(String xmlfile, String clustername, org.apache.thrift.async.AsyncMethodCallback<CommitS4ClusterXMLConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CommitS4ClusterXMLConfig_call method_call = new CommitS4ClusterXMLConfig_call(xmlfile, clustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CommitS4ClusterXMLConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String xmlfile;
      private String clustername;
      public CommitS4ClusterXMLConfig_call(String xmlfile, String clustername, org.apache.thrift.async.AsyncMethodCallback<CommitS4ClusterXMLConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlfile = xmlfile;
        this.clustername = clustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CommitS4ClusterXMLConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CommitS4ClusterXMLConfig_args args = new CommitS4ClusterXMLConfig_args();
        args.setXmlfile(xmlfile);
        args.setClustername(clustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CommitS4ClusterXMLConfig();
      }
    }

    public void AddS4Server(String nodeconfig, String clustername, String s4clustername, String adapterclustername, org.apache.thrift.async.AsyncMethodCallback<AddS4Server_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddS4Server_call method_call = new AddS4Server_call(nodeconfig, clustername, s4clustername, adapterclustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddS4Server_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeconfig;
      private String clustername;
      private String s4clustername;
      private String adapterclustername;
      public AddS4Server_call(String nodeconfig, String clustername, String s4clustername, String adapterclustername, org.apache.thrift.async.AsyncMethodCallback<AddS4Server_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeconfig = nodeconfig;
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.adapterclustername = adapterclustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddS4Server", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddS4Server_args args = new AddS4Server_args();
        args.setNodeconfig(nodeconfig);
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setAdapterclustername(adapterclustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddS4Server();
      }
    }

    public void AddClientAdapter(String nodeconfig, String clustername, String s4clustername, String listenappname, org.apache.thrift.async.AsyncMethodCallback<AddClientAdapter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddClientAdapter_call method_call = new AddClientAdapter_call(nodeconfig, clustername, s4clustername, listenappname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddClientAdapter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeconfig;
      private String clustername;
      private String s4clustername;
      private String listenappname;
      public AddClientAdapter_call(String nodeconfig, String clustername, String s4clustername, String listenappname, org.apache.thrift.async.AsyncMethodCallback<AddClientAdapter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeconfig = nodeconfig;
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.listenappname = listenappname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddClientAdapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddClientAdapter_args args = new AddClientAdapter_args();
        args.setNodeconfig(nodeconfig);
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setListenappname(listenappname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddClientAdapter();
      }
    }

    public void RemoveS4Node(String clustername, String s4clustername, String hostport, org.apache.thrift.async.AsyncMethodCallback<RemoveS4Node_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveS4Node_call method_call = new RemoveS4Node_call(clustername, s4clustername, hostport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveS4Node_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      private String s4clustername;
      private String hostport;
      public RemoveS4Node_call(String clustername, String s4clustername, String hostport, org.apache.thrift.async.AsyncMethodCallback<RemoveS4Node_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.hostport = hostport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveS4Node", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveS4Node_args args = new RemoveS4Node_args();
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setHostport(hostport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveS4Node();
      }
    }

    public void GetS4ClusterMessage(String clustername, org.apache.thrift.async.AsyncMethodCallback<GetS4ClusterMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetS4ClusterMessage_call method_call = new GetS4ClusterMessage_call(clustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetS4ClusterMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      public GetS4ClusterMessage_call(String clustername, org.apache.thrift.async.AsyncMethodCallback<GetS4ClusterMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetS4ClusterMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetS4ClusterMessage_args args = new GetS4ClusterMessage_args();
        args.setClustername(clustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetS4ClusterMessage();
      }
    }

    public void StartS4ServerCluster(String clustername, String s4clustername, String adapterclustername, org.apache.thrift.async.AsyncMethodCallback<StartS4ServerCluster_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      StartS4ServerCluster_call method_call = new StartS4ServerCluster_call(clustername, s4clustername, adapterclustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class StartS4ServerCluster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      private String s4clustername;
      private String adapterclustername;
      public StartS4ServerCluster_call(String clustername, String s4clustername, String adapterclustername, org.apache.thrift.async.AsyncMethodCallback<StartS4ServerCluster_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.adapterclustername = adapterclustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("StartS4ServerCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        StartS4ServerCluster_args args = new StartS4ServerCluster_args();
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setAdapterclustername(adapterclustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_StartS4ServerCluster();
      }
    }

    public void StartClientAdapterCluster(String clustername, String s4clustername, String listenappname, org.apache.thrift.async.AsyncMethodCallback<StartClientAdapterCluster_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      StartClientAdapterCluster_call method_call = new StartClientAdapterCluster_call(clustername, s4clustername, listenappname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class StartClientAdapterCluster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      private String s4clustername;
      private String listenappname;
      public StartClientAdapterCluster_call(String clustername, String s4clustername, String listenappname, org.apache.thrift.async.AsyncMethodCallback<StartClientAdapterCluster_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.listenappname = listenappname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("StartClientAdapterCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        StartClientAdapterCluster_args args = new StartClientAdapterCluster_args();
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setListenappname(listenappname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_StartClientAdapterCluster();
      }
    }

    public void RemoveS4Cluster(String clustername, String s4clustername, org.apache.thrift.async.AsyncMethodCallback<RemoveS4Cluster_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveS4Cluster_call method_call = new RemoveS4Cluster_call(clustername, s4clustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveS4Cluster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      private String s4clustername;
      public RemoveS4Cluster_call(String clustername, String s4clustername, org.apache.thrift.async.AsyncMethodCallback<RemoveS4Cluster_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
        this.s4clustername = s4clustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveS4Cluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveS4Cluster_args args = new RemoveS4Cluster_args();
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveS4Cluster();
      }
    }

    public void RemoveAllS4Cluster(String clustername, org.apache.thrift.async.AsyncMethodCallback<RemoveAllS4Cluster_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveAllS4Cluster_call method_call = new RemoveAllS4Cluster_call(clustername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveAllS4Cluster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      public RemoveAllS4Cluster_call(String clustername, org.apache.thrift.async.AsyncMethodCallback<RemoveAllS4Cluster_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveAllS4Cluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveAllS4Cluster_args args = new RemoveAllS4Cluster_args();
        args.setClustername(clustername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveAllS4Cluster();
      }
    }

    public void RecoveryS4Server(String clustername, String s4clustername, String s4adaptername, String hostport, org.apache.thrift.async.AsyncMethodCallback<RecoveryS4Server_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecoveryS4Server_call method_call = new RecoveryS4Server_call(clustername, s4clustername, s4adaptername, hostport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecoveryS4Server_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      private String s4clustername;
      private String s4adaptername;
      private String hostport;
      public RecoveryS4Server_call(String clustername, String s4clustername, String s4adaptername, String hostport, org.apache.thrift.async.AsyncMethodCallback<RecoveryS4Server_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.s4adaptername = s4adaptername;
        this.hostport = hostport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecoveryS4Server", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecoveryS4Server_args args = new RecoveryS4Server_args();
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setS4adaptername(s4adaptername);
        args.setHostport(hostport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecoveryS4Server();
      }
    }

    public void RecoveryClientServer(String clustername, String s4clustername, String listenappname, String hostport, org.apache.thrift.async.AsyncMethodCallback<RecoveryClientServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecoveryClientServer_call method_call = new RecoveryClientServer_call(clustername, s4clustername, listenappname, hostport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecoveryClientServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clustername;
      private String s4clustername;
      private String listenappname;
      private String hostport;
      public RecoveryClientServer_call(String clustername, String s4clustername, String listenappname, String hostport, org.apache.thrift.async.AsyncMethodCallback<RecoveryClientServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clustername = clustername;
        this.s4clustername = s4clustername;
        this.listenappname = listenappname;
        this.hostport = hostport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecoveryClientServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecoveryClientServer_args args = new RecoveryClientServer_args();
        args.setClustername(clustername);
        args.setS4clustername(s4clustername);
        args.setListenappname(listenappname);
        args.setHostport(hostport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecoveryClientServer();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CreateCluster", new CreateCluster());
      processMap.put("RemoveCluster", new RemoveCluster());
      processMap.put("GetAllMachinesList", new GetAllMachinesList());
      processMap.put("GetAllClustersList", new GetAllClustersList());
      processMap.put("CommitS4ClusterXMLConfig", new CommitS4ClusterXMLConfig());
      processMap.put("AddS4Server", new AddS4Server());
      processMap.put("AddClientAdapter", new AddClientAdapter());
      processMap.put("RemoveS4Node", new RemoveS4Node());
      processMap.put("GetS4ClusterMessage", new GetS4ClusterMessage());
      processMap.put("StartS4ServerCluster", new StartS4ServerCluster());
      processMap.put("StartClientAdapterCluster", new StartClientAdapterCluster());
      processMap.put("RemoveS4Cluster", new RemoveS4Cluster());
      processMap.put("RemoveAllS4Cluster", new RemoveAllS4Cluster());
      processMap.put("RecoveryS4Server", new RecoveryS4Server());
      processMap.put("RecoveryClientServer", new RecoveryClientServer());
      return processMap;
    }

    private static class CreateCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateCluster_args> {
      public CreateCluster() {
        super("CreateCluster");
      }

      protected CreateCluster_args getEmptyArgsInstance() {
        return new CreateCluster_args();
      }

      protected CreateCluster_result getResult(I iface, CreateCluster_args args) throws org.apache.thrift.TException {
        CreateCluster_result result = new CreateCluster_result();
        result.success = iface.CreateCluster(args.zkAddress, args.clustername, args.machinelist);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveCluster_args> {
      public RemoveCluster() {
        super("RemoveCluster");
      }

      protected RemoveCluster_args getEmptyArgsInstance() {
        return new RemoveCluster_args();
      }

      protected RemoveCluster_result getResult(I iface, RemoveCluster_args args) throws org.apache.thrift.TException {
        RemoveCluster_result result = new RemoveCluster_result();
        result.success = iface.RemoveCluster(args.clustername);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetAllMachinesList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllMachinesList_args> {
      public GetAllMachinesList() {
        super("GetAllMachinesList");
      }

      protected GetAllMachinesList_args getEmptyArgsInstance() {
        return new GetAllMachinesList_args();
      }

      protected GetAllMachinesList_result getResult(I iface, GetAllMachinesList_args args) throws org.apache.thrift.TException {
        GetAllMachinesList_result result = new GetAllMachinesList_result();
        result.success = iface.GetAllMachinesList();
        return result;
      }
    }

    private static class GetAllClustersList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllClustersList_args> {
      public GetAllClustersList() {
        super("GetAllClustersList");
      }

      protected GetAllClustersList_args getEmptyArgsInstance() {
        return new GetAllClustersList_args();
      }

      protected GetAllClustersList_result getResult(I iface, GetAllClustersList_args args) throws org.apache.thrift.TException {
        GetAllClustersList_result result = new GetAllClustersList_result();
        result.success = iface.GetAllClustersList();
        return result;
      }
    }

    private static class CommitS4ClusterXMLConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CommitS4ClusterXMLConfig_args> {
      public CommitS4ClusterXMLConfig() {
        super("CommitS4ClusterXMLConfig");
      }

      protected CommitS4ClusterXMLConfig_args getEmptyArgsInstance() {
        return new CommitS4ClusterXMLConfig_args();
      }

      protected CommitS4ClusterXMLConfig_result getResult(I iface, CommitS4ClusterXMLConfig_args args) throws org.apache.thrift.TException {
        CommitS4ClusterXMLConfig_result result = new CommitS4ClusterXMLConfig_result();
        result.success = iface.CommitS4ClusterXMLConfig(args.xmlfile, args.clustername);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddS4Server<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddS4Server_args> {
      public AddS4Server() {
        super("AddS4Server");
      }

      protected AddS4Server_args getEmptyArgsInstance() {
        return new AddS4Server_args();
      }

      protected AddS4Server_result getResult(I iface, AddS4Server_args args) throws org.apache.thrift.TException {
        AddS4Server_result result = new AddS4Server_result();
        result.success = iface.AddS4Server(args.nodeconfig, args.clustername, args.s4clustername, args.adapterclustername);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddClientAdapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddClientAdapter_args> {
      public AddClientAdapter() {
        super("AddClientAdapter");
      }

      protected AddClientAdapter_args getEmptyArgsInstance() {
        return new AddClientAdapter_args();
      }

      protected AddClientAdapter_result getResult(I iface, AddClientAdapter_args args) throws org.apache.thrift.TException {
        AddClientAdapter_result result = new AddClientAdapter_result();
        result.success = iface.AddClientAdapter(args.nodeconfig, args.clustername, args.s4clustername, args.listenappname);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveS4Node<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveS4Node_args> {
      public RemoveS4Node() {
        super("RemoveS4Node");
      }

      protected RemoveS4Node_args getEmptyArgsInstance() {
        return new RemoveS4Node_args();
      }

      protected RemoveS4Node_result getResult(I iface, RemoveS4Node_args args) throws org.apache.thrift.TException {
        RemoveS4Node_result result = new RemoveS4Node_result();
        result.success = iface.RemoveS4Node(args.clustername, args.s4clustername, args.hostport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetS4ClusterMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetS4ClusterMessage_args> {
      public GetS4ClusterMessage() {
        super("GetS4ClusterMessage");
      }

      protected GetS4ClusterMessage_args getEmptyArgsInstance() {
        return new GetS4ClusterMessage_args();
      }

      protected GetS4ClusterMessage_result getResult(I iface, GetS4ClusterMessage_args args) throws org.apache.thrift.TException {
        GetS4ClusterMessage_result result = new GetS4ClusterMessage_result();
        result.success = iface.GetS4ClusterMessage(args.clustername);
        return result;
      }
    }

    private static class StartS4ServerCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, StartS4ServerCluster_args> {
      public StartS4ServerCluster() {
        super("StartS4ServerCluster");
      }

      protected StartS4ServerCluster_args getEmptyArgsInstance() {
        return new StartS4ServerCluster_args();
      }

      protected StartS4ServerCluster_result getResult(I iface, StartS4ServerCluster_args args) throws org.apache.thrift.TException {
        StartS4ServerCluster_result result = new StartS4ServerCluster_result();
        result.success = iface.StartS4ServerCluster(args.clustername, args.s4clustername, args.adapterclustername);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class StartClientAdapterCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, StartClientAdapterCluster_args> {
      public StartClientAdapterCluster() {
        super("StartClientAdapterCluster");
      }

      protected StartClientAdapterCluster_args getEmptyArgsInstance() {
        return new StartClientAdapterCluster_args();
      }

      protected StartClientAdapterCluster_result getResult(I iface, StartClientAdapterCluster_args args) throws org.apache.thrift.TException {
        StartClientAdapterCluster_result result = new StartClientAdapterCluster_result();
        result.success = iface.StartClientAdapterCluster(args.clustername, args.s4clustername, args.listenappname);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveS4Cluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveS4Cluster_args> {
      public RemoveS4Cluster() {
        super("RemoveS4Cluster");
      }

      protected RemoveS4Cluster_args getEmptyArgsInstance() {
        return new RemoveS4Cluster_args();
      }

      protected RemoveS4Cluster_result getResult(I iface, RemoveS4Cluster_args args) throws org.apache.thrift.TException {
        RemoveS4Cluster_result result = new RemoveS4Cluster_result();
        result.success = iface.RemoveS4Cluster(args.clustername, args.s4clustername);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveAllS4Cluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveAllS4Cluster_args> {
      public RemoveAllS4Cluster() {
        super("RemoveAllS4Cluster");
      }

      protected RemoveAllS4Cluster_args getEmptyArgsInstance() {
        return new RemoveAllS4Cluster_args();
      }

      protected RemoveAllS4Cluster_result getResult(I iface, RemoveAllS4Cluster_args args) throws org.apache.thrift.TException {
        RemoveAllS4Cluster_result result = new RemoveAllS4Cluster_result();
        result.success = iface.RemoveAllS4Cluster(args.clustername);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RecoveryS4Server<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecoveryS4Server_args> {
      public RecoveryS4Server() {
        super("RecoveryS4Server");
      }

      protected RecoveryS4Server_args getEmptyArgsInstance() {
        return new RecoveryS4Server_args();
      }

      protected RecoveryS4Server_result getResult(I iface, RecoveryS4Server_args args) throws org.apache.thrift.TException {
        RecoveryS4Server_result result = new RecoveryS4Server_result();
        result.success = iface.RecoveryS4Server(args.clustername, args.s4clustername, args.s4adaptername, args.hostport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RecoveryClientServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecoveryClientServer_args> {
      public RecoveryClientServer() {
        super("RecoveryClientServer");
      }

      protected RecoveryClientServer_args getEmptyArgsInstance() {
        return new RecoveryClientServer_args();
      }

      protected RecoveryClientServer_result getResult(I iface, RecoveryClientServer_args args) throws org.apache.thrift.TException {
        RecoveryClientServer_result result = new RecoveryClientServer_result();
        result.success = iface.RecoveryClientServer(args.clustername, args.s4clustername, args.listenappname, args.hostport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class CreateCluster_args implements org.apache.thrift.TBase<CreateCluster_args, CreateCluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateCluster_args");

    private static final org.apache.thrift.protocol.TField ZK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("zkAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MACHINELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("machinelist", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateCluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateCluster_argsTupleSchemeFactory());
    }

    public String zkAddress; // required
    public String clustername; // required
    public List<String> machinelist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZK_ADDRESS((short)1, "zkAddress"),
      CLUSTERNAME((short)2, "clustername"),
      MACHINELIST((short)3, "machinelist");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZK_ADDRESS
            return ZK_ADDRESS;
          case 2: // CLUSTERNAME
            return CLUSTERNAME;
          case 3: // MACHINELIST
            return MACHINELIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("zkAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MACHINELIST, new org.apache.thrift.meta_data.FieldMetaData("machinelist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateCluster_args.class, metaDataMap);
    }

    public CreateCluster_args() {
    }

    public CreateCluster_args(
      String zkAddress,
      String clustername,
      List<String> machinelist)
    {
      this();
      this.zkAddress = zkAddress;
      this.clustername = clustername;
      this.machinelist = machinelist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateCluster_args(CreateCluster_args other) {
      if (other.isSetZkAddress()) {
        this.zkAddress = other.zkAddress;
      }
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetMachinelist()) {
        List<String> __this__machinelist = new ArrayList<String>();
        for (String other_element : other.machinelist) {
          __this__machinelist.add(other_element);
        }
        this.machinelist = __this__machinelist;
      }
    }

    public CreateCluster_args deepCopy() {
      return new CreateCluster_args(this);
    }

    @Override
    public void clear() {
      this.zkAddress = null;
      this.clustername = null;
      this.machinelist = null;
    }

    public String getZkAddress() {
      return this.zkAddress;
    }

    public CreateCluster_args setZkAddress(String zkAddress) {
      this.zkAddress = zkAddress;
      return this;
    }

    public void unsetZkAddress() {
      this.zkAddress = null;
    }

    /** Returns true if field zkAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetZkAddress() {
      return this.zkAddress != null;
    }

    public void setZkAddressIsSet(boolean value) {
      if (!value) {
        this.zkAddress = null;
      }
    }

    public String getClustername() {
      return this.clustername;
    }

    public CreateCluster_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public int getMachinelistSize() {
      return (this.machinelist == null) ? 0 : this.machinelist.size();
    }

    public java.util.Iterator<String> getMachinelistIterator() {
      return (this.machinelist == null) ? null : this.machinelist.iterator();
    }

    public void addToMachinelist(String elem) {
      if (this.machinelist == null) {
        this.machinelist = new ArrayList<String>();
      }
      this.machinelist.add(elem);
    }

    public List<String> getMachinelist() {
      return this.machinelist;
    }

    public CreateCluster_args setMachinelist(List<String> machinelist) {
      this.machinelist = machinelist;
      return this;
    }

    public void unsetMachinelist() {
      this.machinelist = null;
    }

    /** Returns true if field machinelist is set (has been assigned a value) and false otherwise */
    public boolean isSetMachinelist() {
      return this.machinelist != null;
    }

    public void setMachinelistIsSet(boolean value) {
      if (!value) {
        this.machinelist = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZK_ADDRESS:
        if (value == null) {
          unsetZkAddress();
        } else {
          setZkAddress((String)value);
        }
        break;

      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case MACHINELIST:
        if (value == null) {
          unsetMachinelist();
        } else {
          setMachinelist((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZK_ADDRESS:
        return getZkAddress();

      case CLUSTERNAME:
        return getClustername();

      case MACHINELIST:
        return getMachinelist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZK_ADDRESS:
        return isSetZkAddress();
      case CLUSTERNAME:
        return isSetClustername();
      case MACHINELIST:
        return isSetMachinelist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateCluster_args)
        return this.equals((CreateCluster_args)that);
      return false;
    }

    public boolean equals(CreateCluster_args that) {
      if (that == null)
        return false;

      boolean this_present_zkAddress = true && this.isSetZkAddress();
      boolean that_present_zkAddress = true && that.isSetZkAddress();
      if (this_present_zkAddress || that_present_zkAddress) {
        if (!(this_present_zkAddress && that_present_zkAddress))
          return false;
        if (!this.zkAddress.equals(that.zkAddress))
          return false;
      }

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_machinelist = true && this.isSetMachinelist();
      boolean that_present_machinelist = true && that.isSetMachinelist();
      if (this_present_machinelist || that_present_machinelist) {
        if (!(this_present_machinelist && that_present_machinelist))
          return false;
        if (!this.machinelist.equals(that.machinelist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateCluster_args typedOther = (CreateCluster_args)other;

      lastComparison = Boolean.valueOf(isSetZkAddress()).compareTo(typedOther.isSetZkAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZkAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zkAddress, typedOther.zkAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMachinelist()).compareTo(typedOther.isSetMachinelist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMachinelist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machinelist, typedOther.machinelist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateCluster_args(");
      boolean first = true;

      sb.append("zkAddress:");
      if (this.zkAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.zkAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("machinelist:");
      if (this.machinelist == null) {
        sb.append("null");
      } else {
        sb.append(this.machinelist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateCluster_argsStandardSchemeFactory implements SchemeFactory {
      public CreateCluster_argsStandardScheme getScheme() {
        return new CreateCluster_argsStandardScheme();
      }
    }

    private static class CreateCluster_argsStandardScheme extends StandardScheme<CreateCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZK_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zkAddress = iprot.readString();
                struct.setZkAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MACHINELIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.machinelist = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.machinelist.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setMachinelistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zkAddress != null) {
          oprot.writeFieldBegin(ZK_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.zkAddress);
          oprot.writeFieldEnd();
        }
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.machinelist != null) {
          oprot.writeFieldBegin(MACHINELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.machinelist.size()));
            for (String _iter3 : struct.machinelist)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateCluster_argsTupleSchemeFactory implements SchemeFactory {
      public CreateCluster_argsTupleScheme getScheme() {
        return new CreateCluster_argsTupleScheme();
      }
    }

    private static class CreateCluster_argsTupleScheme extends TupleScheme<CreateCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetZkAddress()) {
          optionals.set(0);
        }
        if (struct.isSetClustername()) {
          optionals.set(1);
        }
        if (struct.isSetMachinelist()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetZkAddress()) {
          oprot.writeString(struct.zkAddress);
        }
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetMachinelist()) {
          {
            oprot.writeI32(struct.machinelist.size());
            for (String _iter4 : struct.machinelist)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.zkAddress = iprot.readString();
          struct.setZkAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.machinelist = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.machinelist.add(_elem7);
            }
          }
          struct.setMachinelistIsSet(true);
        }
      }
    }

  }

  public static class CreateCluster_result implements org.apache.thrift.TBase<CreateCluster_result, CreateCluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateCluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateCluster_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateCluster_result.class, metaDataMap);
    }

    public CreateCluster_result() {
    }

    public CreateCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateCluster_result(CreateCluster_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public CreateCluster_result deepCopy() {
      return new CreateCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CreateCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateCluster_result)
        return this.equals((CreateCluster_result)that);
      return false;
    }

    public boolean equals(CreateCluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateCluster_result typedOther = (CreateCluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateCluster_resultStandardSchemeFactory implements SchemeFactory {
      public CreateCluster_resultStandardScheme getScheme() {
        return new CreateCluster_resultStandardScheme();
      }
    }

    private static class CreateCluster_resultStandardScheme extends StandardScheme<CreateCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateCluster_resultTupleSchemeFactory implements SchemeFactory {
      public CreateCluster_resultTupleScheme getScheme() {
        return new CreateCluster_resultTupleScheme();
      }
    }

    private static class CreateCluster_resultTupleScheme extends TupleScheme<CreateCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveCluster_args implements org.apache.thrift.TBase<RemoveCluster_args, RemoveCluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveCluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveCluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveCluster_argsTupleSchemeFactory());
    }

    public String clustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveCluster_args.class, metaDataMap);
    }

    public RemoveCluster_args() {
    }

    public RemoveCluster_args(
      String clustername)
    {
      this();
      this.clustername = clustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveCluster_args(RemoveCluster_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
    }

    public RemoveCluster_args deepCopy() {
      return new RemoveCluster_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public RemoveCluster_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveCluster_args)
        return this.equals((RemoveCluster_args)that);
      return false;
    }

    public boolean equals(RemoveCluster_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveCluster_args typedOther = (RemoveCluster_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveCluster_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveCluster_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveCluster_argsStandardScheme getScheme() {
        return new RemoveCluster_argsStandardScheme();
      }
    }

    private static class RemoveCluster_argsStandardScheme extends StandardScheme<RemoveCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveCluster_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveCluster_argsTupleScheme getScheme() {
        return new RemoveCluster_argsTupleScheme();
      }
    }

    private static class RemoveCluster_argsTupleScheme extends TupleScheme<RemoveCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
      }
    }

  }

  public static class RemoveCluster_result implements org.apache.thrift.TBase<RemoveCluster_result, RemoveCluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveCluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveCluster_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveCluster_result.class, metaDataMap);
    }

    public RemoveCluster_result() {
    }

    public RemoveCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveCluster_result(RemoveCluster_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveCluster_result deepCopy() {
      return new RemoveCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveCluster_result)
        return this.equals((RemoveCluster_result)that);
      return false;
    }

    public boolean equals(RemoveCluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveCluster_result typedOther = (RemoveCluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveCluster_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveCluster_resultStandardScheme getScheme() {
        return new RemoveCluster_resultStandardScheme();
      }
    }

    private static class RemoveCluster_resultStandardScheme extends StandardScheme<RemoveCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveCluster_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveCluster_resultTupleScheme getScheme() {
        return new RemoveCluster_resultTupleScheme();
      }
    }

    private static class RemoveCluster_resultTupleScheme extends TupleScheme<RemoveCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAllMachinesList_args implements org.apache.thrift.TBase<GetAllMachinesList_args, GetAllMachinesList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllMachinesList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllMachinesList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllMachinesList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllMachinesList_args.class, metaDataMap);
    }

    public GetAllMachinesList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllMachinesList_args(GetAllMachinesList_args other) {
    }

    public GetAllMachinesList_args deepCopy() {
      return new GetAllMachinesList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllMachinesList_args)
        return this.equals((GetAllMachinesList_args)that);
      return false;
    }

    public boolean equals(GetAllMachinesList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAllMachinesList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAllMachinesList_args typedOther = (GetAllMachinesList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllMachinesList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllMachinesList_argsStandardSchemeFactory implements SchemeFactory {
      public GetAllMachinesList_argsStandardScheme getScheme() {
        return new GetAllMachinesList_argsStandardScheme();
      }
    }

    private static class GetAllMachinesList_argsStandardScheme extends StandardScheme<GetAllMachinesList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllMachinesList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllMachinesList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllMachinesList_argsTupleSchemeFactory implements SchemeFactory {
      public GetAllMachinesList_argsTupleScheme getScheme() {
        return new GetAllMachinesList_argsTupleScheme();
      }
    }

    private static class GetAllMachinesList_argsTupleScheme extends TupleScheme<GetAllMachinesList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllMachinesList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllMachinesList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAllMachinesList_result implements org.apache.thrift.TBase<GetAllMachinesList_result, GetAllMachinesList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllMachinesList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllMachinesList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllMachinesList_resultTupleSchemeFactory());
    }

    public List<Machine> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Machine.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllMachinesList_result.class, metaDataMap);
    }

    public GetAllMachinesList_result() {
    }

    public GetAllMachinesList_result(
      List<Machine> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllMachinesList_result(GetAllMachinesList_result other) {
      if (other.isSetSuccess()) {
        List<Machine> __this__success = new ArrayList<Machine>();
        for (Machine other_element : other.success) {
          __this__success.add(new Machine(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetAllMachinesList_result deepCopy() {
      return new GetAllMachinesList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Machine> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Machine elem) {
      if (this.success == null) {
        this.success = new ArrayList<Machine>();
      }
      this.success.add(elem);
    }

    public List<Machine> getSuccess() {
      return this.success;
    }

    public GetAllMachinesList_result setSuccess(List<Machine> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Machine>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllMachinesList_result)
        return this.equals((GetAllMachinesList_result)that);
      return false;
    }

    public boolean equals(GetAllMachinesList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAllMachinesList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAllMachinesList_result typedOther = (GetAllMachinesList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllMachinesList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllMachinesList_resultStandardSchemeFactory implements SchemeFactory {
      public GetAllMachinesList_resultStandardScheme getScheme() {
        return new GetAllMachinesList_resultStandardScheme();
      }
    }

    private static class GetAllMachinesList_resultStandardScheme extends StandardScheme<GetAllMachinesList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllMachinesList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Machine>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Machine _elem10; // required
                    _elem10 = new Machine();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllMachinesList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Machine _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllMachinesList_resultTupleSchemeFactory implements SchemeFactory {
      public GetAllMachinesList_resultTupleScheme getScheme() {
        return new GetAllMachinesList_resultTupleScheme();
      }
    }

    private static class GetAllMachinesList_resultTupleScheme extends TupleScheme<GetAllMachinesList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllMachinesList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Machine _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllMachinesList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Machine>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Machine _elem15; // required
              _elem15 = new Machine();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAllClustersList_args implements org.apache.thrift.TBase<GetAllClustersList_args, GetAllClustersList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllClustersList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllClustersList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllClustersList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllClustersList_args.class, metaDataMap);
    }

    public GetAllClustersList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllClustersList_args(GetAllClustersList_args other) {
    }

    public GetAllClustersList_args deepCopy() {
      return new GetAllClustersList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllClustersList_args)
        return this.equals((GetAllClustersList_args)that);
      return false;
    }

    public boolean equals(GetAllClustersList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAllClustersList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAllClustersList_args typedOther = (GetAllClustersList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllClustersList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllClustersList_argsStandardSchemeFactory implements SchemeFactory {
      public GetAllClustersList_argsStandardScheme getScheme() {
        return new GetAllClustersList_argsStandardScheme();
      }
    }

    private static class GetAllClustersList_argsStandardScheme extends StandardScheme<GetAllClustersList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllClustersList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllClustersList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllClustersList_argsTupleSchemeFactory implements SchemeFactory {
      public GetAllClustersList_argsTupleScheme getScheme() {
        return new GetAllClustersList_argsTupleScheme();
      }
    }

    private static class GetAllClustersList_argsTupleScheme extends TupleScheme<GetAllClustersList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllClustersList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllClustersList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAllClustersList_result implements org.apache.thrift.TBase<GetAllClustersList_result, GetAllClustersList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllClustersList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllClustersList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllClustersList_resultTupleSchemeFactory());
    }

    public List<Cluster> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cluster.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllClustersList_result.class, metaDataMap);
    }

    public GetAllClustersList_result() {
    }

    public GetAllClustersList_result(
      List<Cluster> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllClustersList_result(GetAllClustersList_result other) {
      if (other.isSetSuccess()) {
        List<Cluster> __this__success = new ArrayList<Cluster>();
        for (Cluster other_element : other.success) {
          __this__success.add(new Cluster(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetAllClustersList_result deepCopy() {
      return new GetAllClustersList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cluster> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cluster elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cluster>();
      }
      this.success.add(elem);
    }

    public List<Cluster> getSuccess() {
      return this.success;
    }

    public GetAllClustersList_result setSuccess(List<Cluster> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cluster>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllClustersList_result)
        return this.equals((GetAllClustersList_result)that);
      return false;
    }

    public boolean equals(GetAllClustersList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAllClustersList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAllClustersList_result typedOther = (GetAllClustersList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllClustersList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllClustersList_resultStandardSchemeFactory implements SchemeFactory {
      public GetAllClustersList_resultStandardScheme getScheme() {
        return new GetAllClustersList_resultStandardScheme();
      }
    }

    private static class GetAllClustersList_resultStandardScheme extends StandardScheme<GetAllClustersList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllClustersList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Cluster>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Cluster _elem18; // required
                    _elem18 = new Cluster();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllClustersList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Cluster _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllClustersList_resultTupleSchemeFactory implements SchemeFactory {
      public GetAllClustersList_resultTupleScheme getScheme() {
        return new GetAllClustersList_resultTupleScheme();
      }
    }

    private static class GetAllClustersList_resultTupleScheme extends TupleScheme<GetAllClustersList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllClustersList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Cluster _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllClustersList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Cluster>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Cluster _elem23; // required
              _elem23 = new Cluster();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CommitS4ClusterXMLConfig_args implements org.apache.thrift.TBase<CommitS4ClusterXMLConfig_args, CommitS4ClusterXMLConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommitS4ClusterXMLConfig_args");

    private static final org.apache.thrift.protocol.TField XMLFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlfile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CommitS4ClusterXMLConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CommitS4ClusterXMLConfig_argsTupleSchemeFactory());
    }

    public String xmlfile; // required
    public String clustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XMLFILE((short)1, "xmlfile"),
      CLUSTERNAME((short)2, "clustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XMLFILE
            return XMLFILE;
          case 2: // CLUSTERNAME
            return CLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XMLFILE, new org.apache.thrift.meta_data.FieldMetaData("xmlfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommitS4ClusterXMLConfig_args.class, metaDataMap);
    }

    public CommitS4ClusterXMLConfig_args() {
    }

    public CommitS4ClusterXMLConfig_args(
      String xmlfile,
      String clustername)
    {
      this();
      this.xmlfile = xmlfile;
      this.clustername = clustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CommitS4ClusterXMLConfig_args(CommitS4ClusterXMLConfig_args other) {
      if (other.isSetXmlfile()) {
        this.xmlfile = other.xmlfile;
      }
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
    }

    public CommitS4ClusterXMLConfig_args deepCopy() {
      return new CommitS4ClusterXMLConfig_args(this);
    }

    @Override
    public void clear() {
      this.xmlfile = null;
      this.clustername = null;
    }

    public String getXmlfile() {
      return this.xmlfile;
    }

    public CommitS4ClusterXMLConfig_args setXmlfile(String xmlfile) {
      this.xmlfile = xmlfile;
      return this;
    }

    public void unsetXmlfile() {
      this.xmlfile = null;
    }

    /** Returns true if field xmlfile is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlfile() {
      return this.xmlfile != null;
    }

    public void setXmlfileIsSet(boolean value) {
      if (!value) {
        this.xmlfile = null;
      }
    }

    public String getClustername() {
      return this.clustername;
    }

    public CommitS4ClusterXMLConfig_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XMLFILE:
        if (value == null) {
          unsetXmlfile();
        } else {
          setXmlfile((String)value);
        }
        break;

      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XMLFILE:
        return getXmlfile();

      case CLUSTERNAME:
        return getClustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XMLFILE:
        return isSetXmlfile();
      case CLUSTERNAME:
        return isSetClustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CommitS4ClusterXMLConfig_args)
        return this.equals((CommitS4ClusterXMLConfig_args)that);
      return false;
    }

    public boolean equals(CommitS4ClusterXMLConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlfile = true && this.isSetXmlfile();
      boolean that_present_xmlfile = true && that.isSetXmlfile();
      if (this_present_xmlfile || that_present_xmlfile) {
        if (!(this_present_xmlfile && that_present_xmlfile))
          return false;
        if (!this.xmlfile.equals(that.xmlfile))
          return false;
      }

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CommitS4ClusterXMLConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CommitS4ClusterXMLConfig_args typedOther = (CommitS4ClusterXMLConfig_args)other;

      lastComparison = Boolean.valueOf(isSetXmlfile()).compareTo(typedOther.isSetXmlfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlfile, typedOther.xmlfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CommitS4ClusterXMLConfig_args(");
      boolean first = true;

      sb.append("xmlfile:");
      if (this.xmlfile == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlfile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CommitS4ClusterXMLConfig_argsStandardSchemeFactory implements SchemeFactory {
      public CommitS4ClusterXMLConfig_argsStandardScheme getScheme() {
        return new CommitS4ClusterXMLConfig_argsStandardScheme();
      }
    }

    private static class CommitS4ClusterXMLConfig_argsStandardScheme extends StandardScheme<CommitS4ClusterXMLConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CommitS4ClusterXMLConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XMLFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlfile = iprot.readString();
                struct.setXmlfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CommitS4ClusterXMLConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlfile != null) {
          oprot.writeFieldBegin(XMLFILE_FIELD_DESC);
          oprot.writeString(struct.xmlfile);
          oprot.writeFieldEnd();
        }
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CommitS4ClusterXMLConfig_argsTupleSchemeFactory implements SchemeFactory {
      public CommitS4ClusterXMLConfig_argsTupleScheme getScheme() {
        return new CommitS4ClusterXMLConfig_argsTupleScheme();
      }
    }

    private static class CommitS4ClusterXMLConfig_argsTupleScheme extends TupleScheme<CommitS4ClusterXMLConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CommitS4ClusterXMLConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlfile()) {
          optionals.set(0);
        }
        if (struct.isSetClustername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetXmlfile()) {
          oprot.writeString(struct.xmlfile);
        }
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CommitS4ClusterXMLConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.xmlfile = iprot.readString();
          struct.setXmlfileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
      }
    }

  }

  public static class CommitS4ClusterXMLConfig_result implements org.apache.thrift.TBase<CommitS4ClusterXMLConfig_result, CommitS4ClusterXMLConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommitS4ClusterXMLConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CommitS4ClusterXMLConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CommitS4ClusterXMLConfig_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommitS4ClusterXMLConfig_result.class, metaDataMap);
    }

    public CommitS4ClusterXMLConfig_result() {
    }

    public CommitS4ClusterXMLConfig_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CommitS4ClusterXMLConfig_result(CommitS4ClusterXMLConfig_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public CommitS4ClusterXMLConfig_result deepCopy() {
      return new CommitS4ClusterXMLConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CommitS4ClusterXMLConfig_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CommitS4ClusterXMLConfig_result)
        return this.equals((CommitS4ClusterXMLConfig_result)that);
      return false;
    }

    public boolean equals(CommitS4ClusterXMLConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CommitS4ClusterXMLConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CommitS4ClusterXMLConfig_result typedOther = (CommitS4ClusterXMLConfig_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CommitS4ClusterXMLConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CommitS4ClusterXMLConfig_resultStandardSchemeFactory implements SchemeFactory {
      public CommitS4ClusterXMLConfig_resultStandardScheme getScheme() {
        return new CommitS4ClusterXMLConfig_resultStandardScheme();
      }
    }

    private static class CommitS4ClusterXMLConfig_resultStandardScheme extends StandardScheme<CommitS4ClusterXMLConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CommitS4ClusterXMLConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CommitS4ClusterXMLConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CommitS4ClusterXMLConfig_resultTupleSchemeFactory implements SchemeFactory {
      public CommitS4ClusterXMLConfig_resultTupleScheme getScheme() {
        return new CommitS4ClusterXMLConfig_resultTupleScheme();
      }
    }

    private static class CommitS4ClusterXMLConfig_resultTupleScheme extends TupleScheme<CommitS4ClusterXMLConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CommitS4ClusterXMLConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CommitS4ClusterXMLConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddS4Server_args implements org.apache.thrift.TBase<AddS4Server_args, AddS4Server_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddS4Server_args");

    private static final org.apache.thrift.protocol.TField NODECONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeconfig", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ADAPTERCLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("adapterclustername", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddS4Server_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddS4Server_argsTupleSchemeFactory());
    }

    public String nodeconfig; // required
    public String clustername; // required
    public String s4clustername; // required
    public String adapterclustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODECONFIG((short)1, "nodeconfig"),
      CLUSTERNAME((short)2, "clustername"),
      S4CLUSTERNAME((short)3, "s4clustername"),
      ADAPTERCLUSTERNAME((short)4, "adapterclustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODECONFIG
            return NODECONFIG;
          case 2: // CLUSTERNAME
            return CLUSTERNAME;
          case 3: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 4: // ADAPTERCLUSTERNAME
            return ADAPTERCLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODECONFIG, new org.apache.thrift.meta_data.FieldMetaData("nodeconfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADAPTERCLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("adapterclustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddS4Server_args.class, metaDataMap);
    }

    public AddS4Server_args() {
    }

    public AddS4Server_args(
      String nodeconfig,
      String clustername,
      String s4clustername,
      String adapterclustername)
    {
      this();
      this.nodeconfig = nodeconfig;
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.adapterclustername = adapterclustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddS4Server_args(AddS4Server_args other) {
      if (other.isSetNodeconfig()) {
        this.nodeconfig = other.nodeconfig;
      }
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetAdapterclustername()) {
        this.adapterclustername = other.adapterclustername;
      }
    }

    public AddS4Server_args deepCopy() {
      return new AddS4Server_args(this);
    }

    @Override
    public void clear() {
      this.nodeconfig = null;
      this.clustername = null;
      this.s4clustername = null;
      this.adapterclustername = null;
    }

    public String getNodeconfig() {
      return this.nodeconfig;
    }

    public AddS4Server_args setNodeconfig(String nodeconfig) {
      this.nodeconfig = nodeconfig;
      return this;
    }

    public void unsetNodeconfig() {
      this.nodeconfig = null;
    }

    /** Returns true if field nodeconfig is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeconfig() {
      return this.nodeconfig != null;
    }

    public void setNodeconfigIsSet(boolean value) {
      if (!value) {
        this.nodeconfig = null;
      }
    }

    public String getClustername() {
      return this.clustername;
    }

    public AddS4Server_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public AddS4Server_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getAdapterclustername() {
      return this.adapterclustername;
    }

    public AddS4Server_args setAdapterclustername(String adapterclustername) {
      this.adapterclustername = adapterclustername;
      return this;
    }

    public void unsetAdapterclustername() {
      this.adapterclustername = null;
    }

    /** Returns true if field adapterclustername is set (has been assigned a value) and false otherwise */
    public boolean isSetAdapterclustername() {
      return this.adapterclustername != null;
    }

    public void setAdapterclusternameIsSet(boolean value) {
      if (!value) {
        this.adapterclustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODECONFIG:
        if (value == null) {
          unsetNodeconfig();
        } else {
          setNodeconfig((String)value);
        }
        break;

      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case ADAPTERCLUSTERNAME:
        if (value == null) {
          unsetAdapterclustername();
        } else {
          setAdapterclustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODECONFIG:
        return getNodeconfig();

      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case ADAPTERCLUSTERNAME:
        return getAdapterclustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODECONFIG:
        return isSetNodeconfig();
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case ADAPTERCLUSTERNAME:
        return isSetAdapterclustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddS4Server_args)
        return this.equals((AddS4Server_args)that);
      return false;
    }

    public boolean equals(AddS4Server_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeconfig = true && this.isSetNodeconfig();
      boolean that_present_nodeconfig = true && that.isSetNodeconfig();
      if (this_present_nodeconfig || that_present_nodeconfig) {
        if (!(this_present_nodeconfig && that_present_nodeconfig))
          return false;
        if (!this.nodeconfig.equals(that.nodeconfig))
          return false;
      }

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_adapterclustername = true && this.isSetAdapterclustername();
      boolean that_present_adapterclustername = true && that.isSetAdapterclustername();
      if (this_present_adapterclustername || that_present_adapterclustername) {
        if (!(this_present_adapterclustername && that_present_adapterclustername))
          return false;
        if (!this.adapterclustername.equals(that.adapterclustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddS4Server_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddS4Server_args typedOther = (AddS4Server_args)other;

      lastComparison = Boolean.valueOf(isSetNodeconfig()).compareTo(typedOther.isSetNodeconfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeconfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeconfig, typedOther.nodeconfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdapterclustername()).compareTo(typedOther.isSetAdapterclustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdapterclustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adapterclustername, typedOther.adapterclustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddS4Server_args(");
      boolean first = true;

      sb.append("nodeconfig:");
      if (this.nodeconfig == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeconfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adapterclustername:");
      if (this.adapterclustername == null) {
        sb.append("null");
      } else {
        sb.append(this.adapterclustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddS4Server_argsStandardSchemeFactory implements SchemeFactory {
      public AddS4Server_argsStandardScheme getScheme() {
        return new AddS4Server_argsStandardScheme();
      }
    }

    private static class AddS4Server_argsStandardScheme extends StandardScheme<AddS4Server_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddS4Server_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODECONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeconfig = iprot.readString();
                struct.setNodeconfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ADAPTERCLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adapterclustername = iprot.readString();
                struct.setAdapterclusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddS4Server_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeconfig != null) {
          oprot.writeFieldBegin(NODECONFIG_FIELD_DESC);
          oprot.writeString(struct.nodeconfig);
          oprot.writeFieldEnd();
        }
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.adapterclustername != null) {
          oprot.writeFieldBegin(ADAPTERCLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.adapterclustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddS4Server_argsTupleSchemeFactory implements SchemeFactory {
      public AddS4Server_argsTupleScheme getScheme() {
        return new AddS4Server_argsTupleScheme();
      }
    }

    private static class AddS4Server_argsTupleScheme extends TupleScheme<AddS4Server_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddS4Server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeconfig()) {
          optionals.set(0);
        }
        if (struct.isSetClustername()) {
          optionals.set(1);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(2);
        }
        if (struct.isSetAdapterclustername()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNodeconfig()) {
          oprot.writeString(struct.nodeconfig);
        }
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetAdapterclustername()) {
          oprot.writeString(struct.adapterclustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddS4Server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nodeconfig = iprot.readString();
          struct.setNodeconfigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.adapterclustername = iprot.readString();
          struct.setAdapterclusternameIsSet(true);
        }
      }
    }

  }

  public static class AddS4Server_result implements org.apache.thrift.TBase<AddS4Server_result, AddS4Server_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddS4Server_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddS4Server_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddS4Server_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddS4Server_result.class, metaDataMap);
    }

    public AddS4Server_result() {
    }

    public AddS4Server_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddS4Server_result(AddS4Server_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddS4Server_result deepCopy() {
      return new AddS4Server_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddS4Server_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddS4Server_result)
        return this.equals((AddS4Server_result)that);
      return false;
    }

    public boolean equals(AddS4Server_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddS4Server_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddS4Server_result typedOther = (AddS4Server_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddS4Server_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddS4Server_resultStandardSchemeFactory implements SchemeFactory {
      public AddS4Server_resultStandardScheme getScheme() {
        return new AddS4Server_resultStandardScheme();
      }
    }

    private static class AddS4Server_resultStandardScheme extends StandardScheme<AddS4Server_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddS4Server_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddS4Server_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddS4Server_resultTupleSchemeFactory implements SchemeFactory {
      public AddS4Server_resultTupleScheme getScheme() {
        return new AddS4Server_resultTupleScheme();
      }
    }

    private static class AddS4Server_resultTupleScheme extends TupleScheme<AddS4Server_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddS4Server_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddS4Server_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddClientAdapter_args implements org.apache.thrift.TBase<AddClientAdapter_args, AddClientAdapter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddClientAdapter_args");

    private static final org.apache.thrift.protocol.TField NODECONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeconfig", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LISTENAPPNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("listenappname", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddClientAdapter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddClientAdapter_argsTupleSchemeFactory());
    }

    public String nodeconfig; // required
    public String clustername; // required
    public String s4clustername; // required
    public String listenappname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODECONFIG((short)1, "nodeconfig"),
      CLUSTERNAME((short)2, "clustername"),
      S4CLUSTERNAME((short)3, "s4clustername"),
      LISTENAPPNAME((short)4, "listenappname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODECONFIG
            return NODECONFIG;
          case 2: // CLUSTERNAME
            return CLUSTERNAME;
          case 3: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 4: // LISTENAPPNAME
            return LISTENAPPNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODECONFIG, new org.apache.thrift.meta_data.FieldMetaData("nodeconfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LISTENAPPNAME, new org.apache.thrift.meta_data.FieldMetaData("listenappname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddClientAdapter_args.class, metaDataMap);
    }

    public AddClientAdapter_args() {
    }

    public AddClientAdapter_args(
      String nodeconfig,
      String clustername,
      String s4clustername,
      String listenappname)
    {
      this();
      this.nodeconfig = nodeconfig;
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.listenappname = listenappname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddClientAdapter_args(AddClientAdapter_args other) {
      if (other.isSetNodeconfig()) {
        this.nodeconfig = other.nodeconfig;
      }
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetListenappname()) {
        this.listenappname = other.listenappname;
      }
    }

    public AddClientAdapter_args deepCopy() {
      return new AddClientAdapter_args(this);
    }

    @Override
    public void clear() {
      this.nodeconfig = null;
      this.clustername = null;
      this.s4clustername = null;
      this.listenappname = null;
    }

    public String getNodeconfig() {
      return this.nodeconfig;
    }

    public AddClientAdapter_args setNodeconfig(String nodeconfig) {
      this.nodeconfig = nodeconfig;
      return this;
    }

    public void unsetNodeconfig() {
      this.nodeconfig = null;
    }

    /** Returns true if field nodeconfig is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeconfig() {
      return this.nodeconfig != null;
    }

    public void setNodeconfigIsSet(boolean value) {
      if (!value) {
        this.nodeconfig = null;
      }
    }

    public String getClustername() {
      return this.clustername;
    }

    public AddClientAdapter_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public AddClientAdapter_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getListenappname() {
      return this.listenappname;
    }

    public AddClientAdapter_args setListenappname(String listenappname) {
      this.listenappname = listenappname;
      return this;
    }

    public void unsetListenappname() {
      this.listenappname = null;
    }

    /** Returns true if field listenappname is set (has been assigned a value) and false otherwise */
    public boolean isSetListenappname() {
      return this.listenappname != null;
    }

    public void setListenappnameIsSet(boolean value) {
      if (!value) {
        this.listenappname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODECONFIG:
        if (value == null) {
          unsetNodeconfig();
        } else {
          setNodeconfig((String)value);
        }
        break;

      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case LISTENAPPNAME:
        if (value == null) {
          unsetListenappname();
        } else {
          setListenappname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODECONFIG:
        return getNodeconfig();

      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case LISTENAPPNAME:
        return getListenappname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODECONFIG:
        return isSetNodeconfig();
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case LISTENAPPNAME:
        return isSetListenappname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddClientAdapter_args)
        return this.equals((AddClientAdapter_args)that);
      return false;
    }

    public boolean equals(AddClientAdapter_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeconfig = true && this.isSetNodeconfig();
      boolean that_present_nodeconfig = true && that.isSetNodeconfig();
      if (this_present_nodeconfig || that_present_nodeconfig) {
        if (!(this_present_nodeconfig && that_present_nodeconfig))
          return false;
        if (!this.nodeconfig.equals(that.nodeconfig))
          return false;
      }

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_listenappname = true && this.isSetListenappname();
      boolean that_present_listenappname = true && that.isSetListenappname();
      if (this_present_listenappname || that_present_listenappname) {
        if (!(this_present_listenappname && that_present_listenappname))
          return false;
        if (!this.listenappname.equals(that.listenappname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddClientAdapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddClientAdapter_args typedOther = (AddClientAdapter_args)other;

      lastComparison = Boolean.valueOf(isSetNodeconfig()).compareTo(typedOther.isSetNodeconfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeconfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeconfig, typedOther.nodeconfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListenappname()).compareTo(typedOther.isSetListenappname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListenappname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listenappname, typedOther.listenappname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddClientAdapter_args(");
      boolean first = true;

      sb.append("nodeconfig:");
      if (this.nodeconfig == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeconfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listenappname:");
      if (this.listenappname == null) {
        sb.append("null");
      } else {
        sb.append(this.listenappname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddClientAdapter_argsStandardSchemeFactory implements SchemeFactory {
      public AddClientAdapter_argsStandardScheme getScheme() {
        return new AddClientAdapter_argsStandardScheme();
      }
    }

    private static class AddClientAdapter_argsStandardScheme extends StandardScheme<AddClientAdapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddClientAdapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODECONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeconfig = iprot.readString();
                struct.setNodeconfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LISTENAPPNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.listenappname = iprot.readString();
                struct.setListenappnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddClientAdapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeconfig != null) {
          oprot.writeFieldBegin(NODECONFIG_FIELD_DESC);
          oprot.writeString(struct.nodeconfig);
          oprot.writeFieldEnd();
        }
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.listenappname != null) {
          oprot.writeFieldBegin(LISTENAPPNAME_FIELD_DESC);
          oprot.writeString(struct.listenappname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddClientAdapter_argsTupleSchemeFactory implements SchemeFactory {
      public AddClientAdapter_argsTupleScheme getScheme() {
        return new AddClientAdapter_argsTupleScheme();
      }
    }

    private static class AddClientAdapter_argsTupleScheme extends TupleScheme<AddClientAdapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddClientAdapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeconfig()) {
          optionals.set(0);
        }
        if (struct.isSetClustername()) {
          optionals.set(1);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(2);
        }
        if (struct.isSetListenappname()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNodeconfig()) {
          oprot.writeString(struct.nodeconfig);
        }
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetListenappname()) {
          oprot.writeString(struct.listenappname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddClientAdapter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nodeconfig = iprot.readString();
          struct.setNodeconfigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.listenappname = iprot.readString();
          struct.setListenappnameIsSet(true);
        }
      }
    }

  }

  public static class AddClientAdapter_result implements org.apache.thrift.TBase<AddClientAdapter_result, AddClientAdapter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddClientAdapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddClientAdapter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddClientAdapter_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddClientAdapter_result.class, metaDataMap);
    }

    public AddClientAdapter_result() {
    }

    public AddClientAdapter_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddClientAdapter_result(AddClientAdapter_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddClientAdapter_result deepCopy() {
      return new AddClientAdapter_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddClientAdapter_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddClientAdapter_result)
        return this.equals((AddClientAdapter_result)that);
      return false;
    }

    public boolean equals(AddClientAdapter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddClientAdapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddClientAdapter_result typedOther = (AddClientAdapter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddClientAdapter_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddClientAdapter_resultStandardSchemeFactory implements SchemeFactory {
      public AddClientAdapter_resultStandardScheme getScheme() {
        return new AddClientAdapter_resultStandardScheme();
      }
    }

    private static class AddClientAdapter_resultStandardScheme extends StandardScheme<AddClientAdapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddClientAdapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddClientAdapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddClientAdapter_resultTupleSchemeFactory implements SchemeFactory {
      public AddClientAdapter_resultTupleScheme getScheme() {
        return new AddClientAdapter_resultTupleScheme();
      }
    }

    private static class AddClientAdapter_resultTupleScheme extends TupleScheme<AddClientAdapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddClientAdapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddClientAdapter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveS4Node_args implements org.apache.thrift.TBase<RemoveS4Node_args, RemoveS4Node_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveS4Node_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HOSTPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostport", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveS4Node_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveS4Node_argsTupleSchemeFactory());
    }

    public String clustername; // required
    public String s4clustername; // required
    public String hostport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername"),
      S4CLUSTERNAME((short)2, "s4clustername"),
      HOSTPORT((short)3, "hostport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          case 2: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 3: // HOSTPORT
            return HOSTPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOSTPORT, new org.apache.thrift.meta_data.FieldMetaData("hostport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveS4Node_args.class, metaDataMap);
    }

    public RemoveS4Node_args() {
    }

    public RemoveS4Node_args(
      String clustername,
      String s4clustername,
      String hostport)
    {
      this();
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.hostport = hostport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveS4Node_args(RemoveS4Node_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetHostport()) {
        this.hostport = other.hostport;
      }
    }

    public RemoveS4Node_args deepCopy() {
      return new RemoveS4Node_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
      this.s4clustername = null;
      this.hostport = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public RemoveS4Node_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public RemoveS4Node_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getHostport() {
      return this.hostport;
    }

    public RemoveS4Node_args setHostport(String hostport) {
      this.hostport = hostport;
      return this;
    }

    public void unsetHostport() {
      this.hostport = null;
    }

    /** Returns true if field hostport is set (has been assigned a value) and false otherwise */
    public boolean isSetHostport() {
      return this.hostport != null;
    }

    public void setHostportIsSet(boolean value) {
      if (!value) {
        this.hostport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case HOSTPORT:
        if (value == null) {
          unsetHostport();
        } else {
          setHostport((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case HOSTPORT:
        return getHostport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case HOSTPORT:
        return isSetHostport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveS4Node_args)
        return this.equals((RemoveS4Node_args)that);
      return false;
    }

    public boolean equals(RemoveS4Node_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_hostport = true && this.isSetHostport();
      boolean that_present_hostport = true && that.isSetHostport();
      if (this_present_hostport || that_present_hostport) {
        if (!(this_present_hostport && that_present_hostport))
          return false;
        if (!this.hostport.equals(that.hostport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveS4Node_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveS4Node_args typedOther = (RemoveS4Node_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostport()).compareTo(typedOther.isSetHostport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostport, typedOther.hostport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveS4Node_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostport:");
      if (this.hostport == null) {
        sb.append("null");
      } else {
        sb.append(this.hostport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveS4Node_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveS4Node_argsStandardScheme getScheme() {
        return new RemoveS4Node_argsStandardScheme();
      }
    }

    private static class RemoveS4Node_argsStandardScheme extends StandardScheme<RemoveS4Node_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveS4Node_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOSTPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostport = iprot.readString();
                struct.setHostportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveS4Node_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.hostport != null) {
          oprot.writeFieldBegin(HOSTPORT_FIELD_DESC);
          oprot.writeString(struct.hostport);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveS4Node_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveS4Node_argsTupleScheme getScheme() {
        return new RemoveS4Node_argsTupleScheme();
      }
    }

    private static class RemoveS4Node_argsTupleScheme extends TupleScheme<RemoveS4Node_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveS4Node_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(1);
        }
        if (struct.isSetHostport()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetHostport()) {
          oprot.writeString(struct.hostport);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveS4Node_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostport = iprot.readString();
          struct.setHostportIsSet(true);
        }
      }
    }

  }

  public static class RemoveS4Node_result implements org.apache.thrift.TBase<RemoveS4Node_result, RemoveS4Node_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveS4Node_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveS4Node_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveS4Node_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveS4Node_result.class, metaDataMap);
    }

    public RemoveS4Node_result() {
    }

    public RemoveS4Node_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveS4Node_result(RemoveS4Node_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveS4Node_result deepCopy() {
      return new RemoveS4Node_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveS4Node_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveS4Node_result)
        return this.equals((RemoveS4Node_result)that);
      return false;
    }

    public boolean equals(RemoveS4Node_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveS4Node_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveS4Node_result typedOther = (RemoveS4Node_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveS4Node_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveS4Node_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveS4Node_resultStandardScheme getScheme() {
        return new RemoveS4Node_resultStandardScheme();
      }
    }

    private static class RemoveS4Node_resultStandardScheme extends StandardScheme<RemoveS4Node_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveS4Node_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveS4Node_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveS4Node_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveS4Node_resultTupleScheme getScheme() {
        return new RemoveS4Node_resultTupleScheme();
      }
    }

    private static class RemoveS4Node_resultTupleScheme extends TupleScheme<RemoveS4Node_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveS4Node_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveS4Node_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetS4ClusterMessage_args implements org.apache.thrift.TBase<GetS4ClusterMessage_args, GetS4ClusterMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetS4ClusterMessage_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetS4ClusterMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetS4ClusterMessage_argsTupleSchemeFactory());
    }

    public String clustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetS4ClusterMessage_args.class, metaDataMap);
    }

    public GetS4ClusterMessage_args() {
    }

    public GetS4ClusterMessage_args(
      String clustername)
    {
      this();
      this.clustername = clustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetS4ClusterMessage_args(GetS4ClusterMessage_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
    }

    public GetS4ClusterMessage_args deepCopy() {
      return new GetS4ClusterMessage_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public GetS4ClusterMessage_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetS4ClusterMessage_args)
        return this.equals((GetS4ClusterMessage_args)that);
      return false;
    }

    public boolean equals(GetS4ClusterMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetS4ClusterMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetS4ClusterMessage_args typedOther = (GetS4ClusterMessage_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetS4ClusterMessage_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetS4ClusterMessage_argsStandardSchemeFactory implements SchemeFactory {
      public GetS4ClusterMessage_argsStandardScheme getScheme() {
        return new GetS4ClusterMessage_argsStandardScheme();
      }
    }

    private static class GetS4ClusterMessage_argsStandardScheme extends StandardScheme<GetS4ClusterMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetS4ClusterMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetS4ClusterMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetS4ClusterMessage_argsTupleSchemeFactory implements SchemeFactory {
      public GetS4ClusterMessage_argsTupleScheme getScheme() {
        return new GetS4ClusterMessage_argsTupleScheme();
      }
    }

    private static class GetS4ClusterMessage_argsTupleScheme extends TupleScheme<GetS4ClusterMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetS4ClusterMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetS4ClusterMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
      }
    }

  }

  public static class GetS4ClusterMessage_result implements org.apache.thrift.TBase<GetS4ClusterMessage_result, GetS4ClusterMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetS4ClusterMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetS4ClusterMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetS4ClusterMessage_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetS4ClusterMessage_result.class, metaDataMap);
    }

    public GetS4ClusterMessage_result() {
    }

    public GetS4ClusterMessage_result(
      Map<String,Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetS4ClusterMessage_result(GetS4ClusterMessage_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,String>> __this__success = new HashMap<String,Map<String,String>>();
        for (Map.Entry<String, Map<String,String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,String> __this__success_copy_value = new HashMap<String,String>();
          for (Map.Entry<String, String> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            String other_element_value_element_value = other_element_value_element.getValue();

            String __this__success_copy_value_copy_key = other_element_value_element_key;

            String __this__success_copy_value_copy_value = other_element_value_element_value;

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public GetS4ClusterMessage_result deepCopy() {
      return new GetS4ClusterMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,String>> getSuccess() {
      return this.success;
    }

    public GetS4ClusterMessage_result setSuccess(Map<String,Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetS4ClusterMessage_result)
        return this.equals((GetS4ClusterMessage_result)that);
      return false;
    }

    public boolean equals(GetS4ClusterMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetS4ClusterMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetS4ClusterMessage_result typedOther = (GetS4ClusterMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetS4ClusterMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetS4ClusterMessage_resultStandardSchemeFactory implements SchemeFactory {
      public GetS4ClusterMessage_resultStandardScheme getScheme() {
        return new GetS4ClusterMessage_resultStandardScheme();
      }
    }

    private static class GetS4ClusterMessage_resultStandardScheme extends StandardScheme<GetS4ClusterMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetS4ClusterMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,String>>(2*_map24.size);
                  for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                  {
                    String _key26; // required
                    Map<String,String> _val27; // required
                    _key26 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                      _val27 = new HashMap<String,String>(2*_map28.size);
                      for (int _i29 = 0; _i29 < _map28.size; ++_i29)
                      {
                        String _key30; // required
                        String _val31; // required
                        _key30 = iprot.readString();
                        _val31 = iprot.readString();
                        _val27.put(_key30, _val31);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key26, _val27);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetS4ClusterMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,String>> _iter32 : struct.success.entrySet())
            {
              oprot.writeString(_iter32.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter32.getValue().size()));
                for (Map.Entry<String, String> _iter33 : _iter32.getValue().entrySet())
                {
                  oprot.writeString(_iter33.getKey());
                  oprot.writeString(_iter33.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetS4ClusterMessage_resultTupleSchemeFactory implements SchemeFactory {
      public GetS4ClusterMessage_resultTupleScheme getScheme() {
        return new GetS4ClusterMessage_resultTupleScheme();
      }
    }

    private static class GetS4ClusterMessage_resultTupleScheme extends TupleScheme<GetS4ClusterMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetS4ClusterMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,String>> _iter34 : struct.success.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              {
                oprot.writeI32(_iter34.getValue().size());
                for (Map.Entry<String, String> _iter35 : _iter34.getValue().entrySet())
                {
                  oprot.writeString(_iter35.getKey());
                  oprot.writeString(_iter35.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetS4ClusterMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,String>>(2*_map36.size);
            for (int _i37 = 0; _i37 < _map36.size; ++_i37)
            {
              String _key38; // required
              Map<String,String> _val39; // required
              _key38 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val39 = new HashMap<String,String>(2*_map40.size);
                for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                {
                  String _key42; // required
                  String _val43; // required
                  _key42 = iprot.readString();
                  _val43 = iprot.readString();
                  _val39.put(_key42, _val43);
                }
              }
              struct.success.put(_key38, _val39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class StartS4ServerCluster_args implements org.apache.thrift.TBase<StartS4ServerCluster_args, StartS4ServerCluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartS4ServerCluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ADAPTERCLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("adapterclustername", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new StartS4ServerCluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new StartS4ServerCluster_argsTupleSchemeFactory());
    }

    public String clustername; // required
    public String s4clustername; // required
    public String adapterclustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername"),
      S4CLUSTERNAME((short)2, "s4clustername"),
      ADAPTERCLUSTERNAME((short)3, "adapterclustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          case 2: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 3: // ADAPTERCLUSTERNAME
            return ADAPTERCLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADAPTERCLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("adapterclustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartS4ServerCluster_args.class, metaDataMap);
    }

    public StartS4ServerCluster_args() {
    }

    public StartS4ServerCluster_args(
      String clustername,
      String s4clustername,
      String adapterclustername)
    {
      this();
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.adapterclustername = adapterclustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartS4ServerCluster_args(StartS4ServerCluster_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetAdapterclustername()) {
        this.adapterclustername = other.adapterclustername;
      }
    }

    public StartS4ServerCluster_args deepCopy() {
      return new StartS4ServerCluster_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
      this.s4clustername = null;
      this.adapterclustername = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public StartS4ServerCluster_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public StartS4ServerCluster_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getAdapterclustername() {
      return this.adapterclustername;
    }

    public StartS4ServerCluster_args setAdapterclustername(String adapterclustername) {
      this.adapterclustername = adapterclustername;
      return this;
    }

    public void unsetAdapterclustername() {
      this.adapterclustername = null;
    }

    /** Returns true if field adapterclustername is set (has been assigned a value) and false otherwise */
    public boolean isSetAdapterclustername() {
      return this.adapterclustername != null;
    }

    public void setAdapterclusternameIsSet(boolean value) {
      if (!value) {
        this.adapterclustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case ADAPTERCLUSTERNAME:
        if (value == null) {
          unsetAdapterclustername();
        } else {
          setAdapterclustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case ADAPTERCLUSTERNAME:
        return getAdapterclustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case ADAPTERCLUSTERNAME:
        return isSetAdapterclustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartS4ServerCluster_args)
        return this.equals((StartS4ServerCluster_args)that);
      return false;
    }

    public boolean equals(StartS4ServerCluster_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_adapterclustername = true && this.isSetAdapterclustername();
      boolean that_present_adapterclustername = true && that.isSetAdapterclustername();
      if (this_present_adapterclustername || that_present_adapterclustername) {
        if (!(this_present_adapterclustername && that_present_adapterclustername))
          return false;
        if (!this.adapterclustername.equals(that.adapterclustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(StartS4ServerCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      StartS4ServerCluster_args typedOther = (StartS4ServerCluster_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdapterclustername()).compareTo(typedOther.isSetAdapterclustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdapterclustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adapterclustername, typedOther.adapterclustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartS4ServerCluster_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adapterclustername:");
      if (this.adapterclustername == null) {
        sb.append("null");
      } else {
        sb.append(this.adapterclustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartS4ServerCluster_argsStandardSchemeFactory implements SchemeFactory {
      public StartS4ServerCluster_argsStandardScheme getScheme() {
        return new StartS4ServerCluster_argsStandardScheme();
      }
    }

    private static class StartS4ServerCluster_argsStandardScheme extends StandardScheme<StartS4ServerCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartS4ServerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ADAPTERCLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adapterclustername = iprot.readString();
                struct.setAdapterclusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartS4ServerCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.adapterclustername != null) {
          oprot.writeFieldBegin(ADAPTERCLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.adapterclustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartS4ServerCluster_argsTupleSchemeFactory implements SchemeFactory {
      public StartS4ServerCluster_argsTupleScheme getScheme() {
        return new StartS4ServerCluster_argsTupleScheme();
      }
    }

    private static class StartS4ServerCluster_argsTupleScheme extends TupleScheme<StartS4ServerCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartS4ServerCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(1);
        }
        if (struct.isSetAdapterclustername()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetAdapterclustername()) {
          oprot.writeString(struct.adapterclustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartS4ServerCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.adapterclustername = iprot.readString();
          struct.setAdapterclusternameIsSet(true);
        }
      }
    }

  }

  public static class StartS4ServerCluster_result implements org.apache.thrift.TBase<StartS4ServerCluster_result, StartS4ServerCluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartS4ServerCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new StartS4ServerCluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new StartS4ServerCluster_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartS4ServerCluster_result.class, metaDataMap);
    }

    public StartS4ServerCluster_result() {
    }

    public StartS4ServerCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartS4ServerCluster_result(StartS4ServerCluster_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public StartS4ServerCluster_result deepCopy() {
      return new StartS4ServerCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public StartS4ServerCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartS4ServerCluster_result)
        return this.equals((StartS4ServerCluster_result)that);
      return false;
    }

    public boolean equals(StartS4ServerCluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(StartS4ServerCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      StartS4ServerCluster_result typedOther = (StartS4ServerCluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartS4ServerCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartS4ServerCluster_resultStandardSchemeFactory implements SchemeFactory {
      public StartS4ServerCluster_resultStandardScheme getScheme() {
        return new StartS4ServerCluster_resultStandardScheme();
      }
    }

    private static class StartS4ServerCluster_resultStandardScheme extends StandardScheme<StartS4ServerCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartS4ServerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartS4ServerCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartS4ServerCluster_resultTupleSchemeFactory implements SchemeFactory {
      public StartS4ServerCluster_resultTupleScheme getScheme() {
        return new StartS4ServerCluster_resultTupleScheme();
      }
    }

    private static class StartS4ServerCluster_resultTupleScheme extends TupleScheme<StartS4ServerCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartS4ServerCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartS4ServerCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class StartClientAdapterCluster_args implements org.apache.thrift.TBase<StartClientAdapterCluster_args, StartClientAdapterCluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartClientAdapterCluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LISTENAPPNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("listenappname", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new StartClientAdapterCluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new StartClientAdapterCluster_argsTupleSchemeFactory());
    }

    public String clustername; // required
    public String s4clustername; // required
    public String listenappname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername"),
      S4CLUSTERNAME((short)2, "s4clustername"),
      LISTENAPPNAME((short)3, "listenappname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          case 2: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 3: // LISTENAPPNAME
            return LISTENAPPNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LISTENAPPNAME, new org.apache.thrift.meta_data.FieldMetaData("listenappname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartClientAdapterCluster_args.class, metaDataMap);
    }

    public StartClientAdapterCluster_args() {
    }

    public StartClientAdapterCluster_args(
      String clustername,
      String s4clustername,
      String listenappname)
    {
      this();
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.listenappname = listenappname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartClientAdapterCluster_args(StartClientAdapterCluster_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetListenappname()) {
        this.listenappname = other.listenappname;
      }
    }

    public StartClientAdapterCluster_args deepCopy() {
      return new StartClientAdapterCluster_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
      this.s4clustername = null;
      this.listenappname = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public StartClientAdapterCluster_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public StartClientAdapterCluster_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getListenappname() {
      return this.listenappname;
    }

    public StartClientAdapterCluster_args setListenappname(String listenappname) {
      this.listenappname = listenappname;
      return this;
    }

    public void unsetListenappname() {
      this.listenappname = null;
    }

    /** Returns true if field listenappname is set (has been assigned a value) and false otherwise */
    public boolean isSetListenappname() {
      return this.listenappname != null;
    }

    public void setListenappnameIsSet(boolean value) {
      if (!value) {
        this.listenappname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case LISTENAPPNAME:
        if (value == null) {
          unsetListenappname();
        } else {
          setListenappname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case LISTENAPPNAME:
        return getListenappname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case LISTENAPPNAME:
        return isSetListenappname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartClientAdapterCluster_args)
        return this.equals((StartClientAdapterCluster_args)that);
      return false;
    }

    public boolean equals(StartClientAdapterCluster_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_listenappname = true && this.isSetListenappname();
      boolean that_present_listenappname = true && that.isSetListenappname();
      if (this_present_listenappname || that_present_listenappname) {
        if (!(this_present_listenappname && that_present_listenappname))
          return false;
        if (!this.listenappname.equals(that.listenappname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(StartClientAdapterCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      StartClientAdapterCluster_args typedOther = (StartClientAdapterCluster_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListenappname()).compareTo(typedOther.isSetListenappname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListenappname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listenappname, typedOther.listenappname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartClientAdapterCluster_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listenappname:");
      if (this.listenappname == null) {
        sb.append("null");
      } else {
        sb.append(this.listenappname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartClientAdapterCluster_argsStandardSchemeFactory implements SchemeFactory {
      public StartClientAdapterCluster_argsStandardScheme getScheme() {
        return new StartClientAdapterCluster_argsStandardScheme();
      }
    }

    private static class StartClientAdapterCluster_argsStandardScheme extends StandardScheme<StartClientAdapterCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartClientAdapterCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LISTENAPPNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.listenappname = iprot.readString();
                struct.setListenappnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartClientAdapterCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.listenappname != null) {
          oprot.writeFieldBegin(LISTENAPPNAME_FIELD_DESC);
          oprot.writeString(struct.listenappname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartClientAdapterCluster_argsTupleSchemeFactory implements SchemeFactory {
      public StartClientAdapterCluster_argsTupleScheme getScheme() {
        return new StartClientAdapterCluster_argsTupleScheme();
      }
    }

    private static class StartClientAdapterCluster_argsTupleScheme extends TupleScheme<StartClientAdapterCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartClientAdapterCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(1);
        }
        if (struct.isSetListenappname()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetListenappname()) {
          oprot.writeString(struct.listenappname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartClientAdapterCluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.listenappname = iprot.readString();
          struct.setListenappnameIsSet(true);
        }
      }
    }

  }

  public static class StartClientAdapterCluster_result implements org.apache.thrift.TBase<StartClientAdapterCluster_result, StartClientAdapterCluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartClientAdapterCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new StartClientAdapterCluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new StartClientAdapterCluster_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartClientAdapterCluster_result.class, metaDataMap);
    }

    public StartClientAdapterCluster_result() {
    }

    public StartClientAdapterCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartClientAdapterCluster_result(StartClientAdapterCluster_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public StartClientAdapterCluster_result deepCopy() {
      return new StartClientAdapterCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public StartClientAdapterCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartClientAdapterCluster_result)
        return this.equals((StartClientAdapterCluster_result)that);
      return false;
    }

    public boolean equals(StartClientAdapterCluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(StartClientAdapterCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      StartClientAdapterCluster_result typedOther = (StartClientAdapterCluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartClientAdapterCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartClientAdapterCluster_resultStandardSchemeFactory implements SchemeFactory {
      public StartClientAdapterCluster_resultStandardScheme getScheme() {
        return new StartClientAdapterCluster_resultStandardScheme();
      }
    }

    private static class StartClientAdapterCluster_resultStandardScheme extends StandardScheme<StartClientAdapterCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartClientAdapterCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartClientAdapterCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartClientAdapterCluster_resultTupleSchemeFactory implements SchemeFactory {
      public StartClientAdapterCluster_resultTupleScheme getScheme() {
        return new StartClientAdapterCluster_resultTupleScheme();
      }
    }

    private static class StartClientAdapterCluster_resultTupleScheme extends TupleScheme<StartClientAdapterCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartClientAdapterCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartClientAdapterCluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveS4Cluster_args implements org.apache.thrift.TBase<RemoveS4Cluster_args, RemoveS4Cluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveS4Cluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveS4Cluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveS4Cluster_argsTupleSchemeFactory());
    }

    public String clustername; // required
    public String s4clustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername"),
      S4CLUSTERNAME((short)2, "s4clustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          case 2: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveS4Cluster_args.class, metaDataMap);
    }

    public RemoveS4Cluster_args() {
    }

    public RemoveS4Cluster_args(
      String clustername,
      String s4clustername)
    {
      this();
      this.clustername = clustername;
      this.s4clustername = s4clustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveS4Cluster_args(RemoveS4Cluster_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
    }

    public RemoveS4Cluster_args deepCopy() {
      return new RemoveS4Cluster_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
      this.s4clustername = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public RemoveS4Cluster_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public RemoveS4Cluster_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveS4Cluster_args)
        return this.equals((RemoveS4Cluster_args)that);
      return false;
    }

    public boolean equals(RemoveS4Cluster_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveS4Cluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveS4Cluster_args typedOther = (RemoveS4Cluster_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveS4Cluster_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveS4Cluster_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveS4Cluster_argsStandardScheme getScheme() {
        return new RemoveS4Cluster_argsStandardScheme();
      }
    }

    private static class RemoveS4Cluster_argsStandardScheme extends StandardScheme<RemoveS4Cluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveS4Cluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveS4Cluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveS4Cluster_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveS4Cluster_argsTupleScheme getScheme() {
        return new RemoveS4Cluster_argsTupleScheme();
      }
    }

    private static class RemoveS4Cluster_argsTupleScheme extends TupleScheme<RemoveS4Cluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveS4Cluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveS4Cluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
      }
    }

  }

  public static class RemoveS4Cluster_result implements org.apache.thrift.TBase<RemoveS4Cluster_result, RemoveS4Cluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveS4Cluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveS4Cluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveS4Cluster_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveS4Cluster_result.class, metaDataMap);
    }

    public RemoveS4Cluster_result() {
    }

    public RemoveS4Cluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveS4Cluster_result(RemoveS4Cluster_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveS4Cluster_result deepCopy() {
      return new RemoveS4Cluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveS4Cluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveS4Cluster_result)
        return this.equals((RemoveS4Cluster_result)that);
      return false;
    }

    public boolean equals(RemoveS4Cluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveS4Cluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveS4Cluster_result typedOther = (RemoveS4Cluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveS4Cluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveS4Cluster_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveS4Cluster_resultStandardScheme getScheme() {
        return new RemoveS4Cluster_resultStandardScheme();
      }
    }

    private static class RemoveS4Cluster_resultStandardScheme extends StandardScheme<RemoveS4Cluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveS4Cluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveS4Cluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveS4Cluster_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveS4Cluster_resultTupleScheme getScheme() {
        return new RemoveS4Cluster_resultTupleScheme();
      }
    }

    private static class RemoveS4Cluster_resultTupleScheme extends TupleScheme<RemoveS4Cluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveS4Cluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveS4Cluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveAllS4Cluster_args implements org.apache.thrift.TBase<RemoveAllS4Cluster_args, RemoveAllS4Cluster_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveAllS4Cluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveAllS4Cluster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveAllS4Cluster_argsTupleSchemeFactory());
    }

    public String clustername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveAllS4Cluster_args.class, metaDataMap);
    }

    public RemoveAllS4Cluster_args() {
    }

    public RemoveAllS4Cluster_args(
      String clustername)
    {
      this();
      this.clustername = clustername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveAllS4Cluster_args(RemoveAllS4Cluster_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
    }

    public RemoveAllS4Cluster_args deepCopy() {
      return new RemoveAllS4Cluster_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public RemoveAllS4Cluster_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveAllS4Cluster_args)
        return this.equals((RemoveAllS4Cluster_args)that);
      return false;
    }

    public boolean equals(RemoveAllS4Cluster_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveAllS4Cluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveAllS4Cluster_args typedOther = (RemoveAllS4Cluster_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveAllS4Cluster_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveAllS4Cluster_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveAllS4Cluster_argsStandardScheme getScheme() {
        return new RemoveAllS4Cluster_argsStandardScheme();
      }
    }

    private static class RemoveAllS4Cluster_argsStandardScheme extends StandardScheme<RemoveAllS4Cluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveAllS4Cluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveAllS4Cluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveAllS4Cluster_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveAllS4Cluster_argsTupleScheme getScheme() {
        return new RemoveAllS4Cluster_argsTupleScheme();
      }
    }

    private static class RemoveAllS4Cluster_argsTupleScheme extends TupleScheme<RemoveAllS4Cluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveAllS4Cluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveAllS4Cluster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
      }
    }

  }

  public static class RemoveAllS4Cluster_result implements org.apache.thrift.TBase<RemoveAllS4Cluster_result, RemoveAllS4Cluster_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveAllS4Cluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveAllS4Cluster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveAllS4Cluster_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveAllS4Cluster_result.class, metaDataMap);
    }

    public RemoveAllS4Cluster_result() {
    }

    public RemoveAllS4Cluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveAllS4Cluster_result(RemoveAllS4Cluster_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveAllS4Cluster_result deepCopy() {
      return new RemoveAllS4Cluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveAllS4Cluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveAllS4Cluster_result)
        return this.equals((RemoveAllS4Cluster_result)that);
      return false;
    }

    public boolean equals(RemoveAllS4Cluster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveAllS4Cluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveAllS4Cluster_result typedOther = (RemoveAllS4Cluster_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveAllS4Cluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveAllS4Cluster_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveAllS4Cluster_resultStandardScheme getScheme() {
        return new RemoveAllS4Cluster_resultStandardScheme();
      }
    }

    private static class RemoveAllS4Cluster_resultStandardScheme extends StandardScheme<RemoveAllS4Cluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveAllS4Cluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveAllS4Cluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveAllS4Cluster_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveAllS4Cluster_resultTupleScheme getScheme() {
        return new RemoveAllS4Cluster_resultTupleScheme();
      }
    }

    private static class RemoveAllS4Cluster_resultTupleScheme extends TupleScheme<RemoveAllS4Cluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveAllS4Cluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveAllS4Cluster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecoveryS4Server_args implements org.apache.thrift.TBase<RecoveryS4Server_args, RecoveryS4Server_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecoveryS4Server_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField S4ADAPTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4adaptername", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOSTPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostport", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecoveryS4Server_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecoveryS4Server_argsTupleSchemeFactory());
    }

    public String clustername; // required
    public String s4clustername; // required
    public String s4adaptername; // required
    public String hostport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername"),
      S4CLUSTERNAME((short)2, "s4clustername"),
      S4ADAPTERNAME((short)3, "s4adaptername"),
      HOSTPORT((short)4, "hostport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          case 2: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 3: // S4ADAPTERNAME
            return S4ADAPTERNAME;
          case 4: // HOSTPORT
            return HOSTPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4ADAPTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4adaptername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOSTPORT, new org.apache.thrift.meta_data.FieldMetaData("hostport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecoveryS4Server_args.class, metaDataMap);
    }

    public RecoveryS4Server_args() {
    }

    public RecoveryS4Server_args(
      String clustername,
      String s4clustername,
      String s4adaptername,
      String hostport)
    {
      this();
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.s4adaptername = s4adaptername;
      this.hostport = hostport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecoveryS4Server_args(RecoveryS4Server_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetS4adaptername()) {
        this.s4adaptername = other.s4adaptername;
      }
      if (other.isSetHostport()) {
        this.hostport = other.hostport;
      }
    }

    public RecoveryS4Server_args deepCopy() {
      return new RecoveryS4Server_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
      this.s4clustername = null;
      this.s4adaptername = null;
      this.hostport = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public RecoveryS4Server_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public RecoveryS4Server_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getS4adaptername() {
      return this.s4adaptername;
    }

    public RecoveryS4Server_args setS4adaptername(String s4adaptername) {
      this.s4adaptername = s4adaptername;
      return this;
    }

    public void unsetS4adaptername() {
      this.s4adaptername = null;
    }

    /** Returns true if field s4adaptername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4adaptername() {
      return this.s4adaptername != null;
    }

    public void setS4adapternameIsSet(boolean value) {
      if (!value) {
        this.s4adaptername = null;
      }
    }

    public String getHostport() {
      return this.hostport;
    }

    public RecoveryS4Server_args setHostport(String hostport) {
      this.hostport = hostport;
      return this;
    }

    public void unsetHostport() {
      this.hostport = null;
    }

    /** Returns true if field hostport is set (has been assigned a value) and false otherwise */
    public boolean isSetHostport() {
      return this.hostport != null;
    }

    public void setHostportIsSet(boolean value) {
      if (!value) {
        this.hostport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case S4ADAPTERNAME:
        if (value == null) {
          unsetS4adaptername();
        } else {
          setS4adaptername((String)value);
        }
        break;

      case HOSTPORT:
        if (value == null) {
          unsetHostport();
        } else {
          setHostport((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case S4ADAPTERNAME:
        return getS4adaptername();

      case HOSTPORT:
        return getHostport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case S4ADAPTERNAME:
        return isSetS4adaptername();
      case HOSTPORT:
        return isSetHostport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecoveryS4Server_args)
        return this.equals((RecoveryS4Server_args)that);
      return false;
    }

    public boolean equals(RecoveryS4Server_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_s4adaptername = true && this.isSetS4adaptername();
      boolean that_present_s4adaptername = true && that.isSetS4adaptername();
      if (this_present_s4adaptername || that_present_s4adaptername) {
        if (!(this_present_s4adaptername && that_present_s4adaptername))
          return false;
        if (!this.s4adaptername.equals(that.s4adaptername))
          return false;
      }

      boolean this_present_hostport = true && this.isSetHostport();
      boolean that_present_hostport = true && that.isSetHostport();
      if (this_present_hostport || that_present_hostport) {
        if (!(this_present_hostport && that_present_hostport))
          return false;
        if (!this.hostport.equals(that.hostport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecoveryS4Server_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecoveryS4Server_args typedOther = (RecoveryS4Server_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4adaptername()).compareTo(typedOther.isSetS4adaptername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4adaptername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4adaptername, typedOther.s4adaptername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostport()).compareTo(typedOther.isSetHostport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostport, typedOther.hostport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecoveryS4Server_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4adaptername:");
      if (this.s4adaptername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4adaptername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostport:");
      if (this.hostport == null) {
        sb.append("null");
      } else {
        sb.append(this.hostport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecoveryS4Server_argsStandardSchemeFactory implements SchemeFactory {
      public RecoveryS4Server_argsStandardScheme getScheme() {
        return new RecoveryS4Server_argsStandardScheme();
      }
    }

    private static class RecoveryS4Server_argsStandardScheme extends StandardScheme<RecoveryS4Server_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecoveryS4Server_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // S4ADAPTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4adaptername = iprot.readString();
                struct.setS4adapternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOSTPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostport = iprot.readString();
                struct.setHostportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecoveryS4Server_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4adaptername != null) {
          oprot.writeFieldBegin(S4ADAPTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4adaptername);
          oprot.writeFieldEnd();
        }
        if (struct.hostport != null) {
          oprot.writeFieldBegin(HOSTPORT_FIELD_DESC);
          oprot.writeString(struct.hostport);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecoveryS4Server_argsTupleSchemeFactory implements SchemeFactory {
      public RecoveryS4Server_argsTupleScheme getScheme() {
        return new RecoveryS4Server_argsTupleScheme();
      }
    }

    private static class RecoveryS4Server_argsTupleScheme extends TupleScheme<RecoveryS4Server_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecoveryS4Server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(1);
        }
        if (struct.isSetS4adaptername()) {
          optionals.set(2);
        }
        if (struct.isSetHostport()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetS4adaptername()) {
          oprot.writeString(struct.s4adaptername);
        }
        if (struct.isSetHostport()) {
          oprot.writeString(struct.hostport);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecoveryS4Server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.s4adaptername = iprot.readString();
          struct.setS4adapternameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.hostport = iprot.readString();
          struct.setHostportIsSet(true);
        }
      }
    }

  }

  public static class RecoveryS4Server_result implements org.apache.thrift.TBase<RecoveryS4Server_result, RecoveryS4Server_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecoveryS4Server_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecoveryS4Server_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecoveryS4Server_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecoveryS4Server_result.class, metaDataMap);
    }

    public RecoveryS4Server_result() {
    }

    public RecoveryS4Server_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecoveryS4Server_result(RecoveryS4Server_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RecoveryS4Server_result deepCopy() {
      return new RecoveryS4Server_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RecoveryS4Server_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecoveryS4Server_result)
        return this.equals((RecoveryS4Server_result)that);
      return false;
    }

    public boolean equals(RecoveryS4Server_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecoveryS4Server_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecoveryS4Server_result typedOther = (RecoveryS4Server_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecoveryS4Server_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecoveryS4Server_resultStandardSchemeFactory implements SchemeFactory {
      public RecoveryS4Server_resultStandardScheme getScheme() {
        return new RecoveryS4Server_resultStandardScheme();
      }
    }

    private static class RecoveryS4Server_resultStandardScheme extends StandardScheme<RecoveryS4Server_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecoveryS4Server_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecoveryS4Server_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecoveryS4Server_resultTupleSchemeFactory implements SchemeFactory {
      public RecoveryS4Server_resultTupleScheme getScheme() {
        return new RecoveryS4Server_resultTupleScheme();
      }
    }

    private static class RecoveryS4Server_resultTupleScheme extends TupleScheme<RecoveryS4Server_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecoveryS4Server_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecoveryS4Server_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecoveryClientServer_args implements org.apache.thrift.TBase<RecoveryClientServer_args, RecoveryClientServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecoveryClientServer_args");

    private static final org.apache.thrift.protocol.TField CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clustername", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S4CLUSTERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("s4clustername", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LISTENAPPNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("listenappname", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOSTPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostport", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecoveryClientServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecoveryClientServer_argsTupleSchemeFactory());
    }

    public String clustername; // required
    public String s4clustername; // required
    public String listenappname; // required
    public String hostport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTERNAME((short)1, "clustername"),
      S4CLUSTERNAME((short)2, "s4clustername"),
      LISTENAPPNAME((short)3, "listenappname"),
      HOSTPORT((short)4, "hostport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTERNAME
            return CLUSTERNAME;
          case 2: // S4CLUSTERNAME
            return S4CLUSTERNAME;
          case 3: // LISTENAPPNAME
            return LISTENAPPNAME;
          case 4: // HOSTPORT
            return HOSTPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S4CLUSTERNAME, new org.apache.thrift.meta_data.FieldMetaData("s4clustername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LISTENAPPNAME, new org.apache.thrift.meta_data.FieldMetaData("listenappname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOSTPORT, new org.apache.thrift.meta_data.FieldMetaData("hostport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecoveryClientServer_args.class, metaDataMap);
    }

    public RecoveryClientServer_args() {
    }

    public RecoveryClientServer_args(
      String clustername,
      String s4clustername,
      String listenappname,
      String hostport)
    {
      this();
      this.clustername = clustername;
      this.s4clustername = s4clustername;
      this.listenappname = listenappname;
      this.hostport = hostport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecoveryClientServer_args(RecoveryClientServer_args other) {
      if (other.isSetClustername()) {
        this.clustername = other.clustername;
      }
      if (other.isSetS4clustername()) {
        this.s4clustername = other.s4clustername;
      }
      if (other.isSetListenappname()) {
        this.listenappname = other.listenappname;
      }
      if (other.isSetHostport()) {
        this.hostport = other.hostport;
      }
    }

    public RecoveryClientServer_args deepCopy() {
      return new RecoveryClientServer_args(this);
    }

    @Override
    public void clear() {
      this.clustername = null;
      this.s4clustername = null;
      this.listenappname = null;
      this.hostport = null;
    }

    public String getClustername() {
      return this.clustername;
    }

    public RecoveryClientServer_args setClustername(String clustername) {
      this.clustername = clustername;
      return this;
    }

    public void unsetClustername() {
      this.clustername = null;
    }

    /** Returns true if field clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetClustername() {
      return this.clustername != null;
    }

    public void setClusternameIsSet(boolean value) {
      if (!value) {
        this.clustername = null;
      }
    }

    public String getS4clustername() {
      return this.s4clustername;
    }

    public RecoveryClientServer_args setS4clustername(String s4clustername) {
      this.s4clustername = s4clustername;
      return this;
    }

    public void unsetS4clustername() {
      this.s4clustername = null;
    }

    /** Returns true if field s4clustername is set (has been assigned a value) and false otherwise */
    public boolean isSetS4clustername() {
      return this.s4clustername != null;
    }

    public void setS4clusternameIsSet(boolean value) {
      if (!value) {
        this.s4clustername = null;
      }
    }

    public String getListenappname() {
      return this.listenappname;
    }

    public RecoveryClientServer_args setListenappname(String listenappname) {
      this.listenappname = listenappname;
      return this;
    }

    public void unsetListenappname() {
      this.listenappname = null;
    }

    /** Returns true if field listenappname is set (has been assigned a value) and false otherwise */
    public boolean isSetListenappname() {
      return this.listenappname != null;
    }

    public void setListenappnameIsSet(boolean value) {
      if (!value) {
        this.listenappname = null;
      }
    }

    public String getHostport() {
      return this.hostport;
    }

    public RecoveryClientServer_args setHostport(String hostport) {
      this.hostport = hostport;
      return this;
    }

    public void unsetHostport() {
      this.hostport = null;
    }

    /** Returns true if field hostport is set (has been assigned a value) and false otherwise */
    public boolean isSetHostport() {
      return this.hostport != null;
    }

    public void setHostportIsSet(boolean value) {
      if (!value) {
        this.hostport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLUSTERNAME:
        if (value == null) {
          unsetClustername();
        } else {
          setClustername((String)value);
        }
        break;

      case S4CLUSTERNAME:
        if (value == null) {
          unsetS4clustername();
        } else {
          setS4clustername((String)value);
        }
        break;

      case LISTENAPPNAME:
        if (value == null) {
          unsetListenappname();
        } else {
          setListenappname((String)value);
        }
        break;

      case HOSTPORT:
        if (value == null) {
          unsetHostport();
        } else {
          setHostport((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTERNAME:
        return getClustername();

      case S4CLUSTERNAME:
        return getS4clustername();

      case LISTENAPPNAME:
        return getListenappname();

      case HOSTPORT:
        return getHostport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLUSTERNAME:
        return isSetClustername();
      case S4CLUSTERNAME:
        return isSetS4clustername();
      case LISTENAPPNAME:
        return isSetListenappname();
      case HOSTPORT:
        return isSetHostport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecoveryClientServer_args)
        return this.equals((RecoveryClientServer_args)that);
      return false;
    }

    public boolean equals(RecoveryClientServer_args that) {
      if (that == null)
        return false;

      boolean this_present_clustername = true && this.isSetClustername();
      boolean that_present_clustername = true && that.isSetClustername();
      if (this_present_clustername || that_present_clustername) {
        if (!(this_present_clustername && that_present_clustername))
          return false;
        if (!this.clustername.equals(that.clustername))
          return false;
      }

      boolean this_present_s4clustername = true && this.isSetS4clustername();
      boolean that_present_s4clustername = true && that.isSetS4clustername();
      if (this_present_s4clustername || that_present_s4clustername) {
        if (!(this_present_s4clustername && that_present_s4clustername))
          return false;
        if (!this.s4clustername.equals(that.s4clustername))
          return false;
      }

      boolean this_present_listenappname = true && this.isSetListenappname();
      boolean that_present_listenappname = true && that.isSetListenappname();
      if (this_present_listenappname || that_present_listenappname) {
        if (!(this_present_listenappname && that_present_listenappname))
          return false;
        if (!this.listenappname.equals(that.listenappname))
          return false;
      }

      boolean this_present_hostport = true && this.isSetHostport();
      boolean that_present_hostport = true && that.isSetHostport();
      if (this_present_hostport || that_present_hostport) {
        if (!(this_present_hostport && that_present_hostport))
          return false;
        if (!this.hostport.equals(that.hostport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecoveryClientServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecoveryClientServer_args typedOther = (RecoveryClientServer_args)other;

      lastComparison = Boolean.valueOf(isSetClustername()).compareTo(typedOther.isSetClustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clustername, typedOther.clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS4clustername()).compareTo(typedOther.isSetS4clustername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS4clustername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4clustername, typedOther.s4clustername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListenappname()).compareTo(typedOther.isSetListenappname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListenappname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listenappname, typedOther.listenappname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostport()).compareTo(typedOther.isSetHostport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostport, typedOther.hostport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecoveryClientServer_args(");
      boolean first = true;

      sb.append("clustername:");
      if (this.clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s4clustername:");
      if (this.s4clustername == null) {
        sb.append("null");
      } else {
        sb.append(this.s4clustername);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listenappname:");
      if (this.listenappname == null) {
        sb.append("null");
      } else {
        sb.append(this.listenappname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostport:");
      if (this.hostport == null) {
        sb.append("null");
      } else {
        sb.append(this.hostport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecoveryClientServer_argsStandardSchemeFactory implements SchemeFactory {
      public RecoveryClientServer_argsStandardScheme getScheme() {
        return new RecoveryClientServer_argsStandardScheme();
      }
    }

    private static class RecoveryClientServer_argsStandardScheme extends StandardScheme<RecoveryClientServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecoveryClientServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clustername = iprot.readString();
                struct.setClusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S4CLUSTERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.s4clustername = iprot.readString();
                struct.setS4clusternameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LISTENAPPNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.listenappname = iprot.readString();
                struct.setListenappnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOSTPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostport = iprot.readString();
                struct.setHostportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecoveryClientServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clustername != null) {
          oprot.writeFieldBegin(CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.clustername);
          oprot.writeFieldEnd();
        }
        if (struct.s4clustername != null) {
          oprot.writeFieldBegin(S4CLUSTERNAME_FIELD_DESC);
          oprot.writeString(struct.s4clustername);
          oprot.writeFieldEnd();
        }
        if (struct.listenappname != null) {
          oprot.writeFieldBegin(LISTENAPPNAME_FIELD_DESC);
          oprot.writeString(struct.listenappname);
          oprot.writeFieldEnd();
        }
        if (struct.hostport != null) {
          oprot.writeFieldBegin(HOSTPORT_FIELD_DESC);
          oprot.writeString(struct.hostport);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecoveryClientServer_argsTupleSchemeFactory implements SchemeFactory {
      public RecoveryClientServer_argsTupleScheme getScheme() {
        return new RecoveryClientServer_argsTupleScheme();
      }
    }

    private static class RecoveryClientServer_argsTupleScheme extends TupleScheme<RecoveryClientServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecoveryClientServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClustername()) {
          optionals.set(0);
        }
        if (struct.isSetS4clustername()) {
          optionals.set(1);
        }
        if (struct.isSetListenappname()) {
          optionals.set(2);
        }
        if (struct.isSetHostport()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetClustername()) {
          oprot.writeString(struct.clustername);
        }
        if (struct.isSetS4clustername()) {
          oprot.writeString(struct.s4clustername);
        }
        if (struct.isSetListenappname()) {
          oprot.writeString(struct.listenappname);
        }
        if (struct.isSetHostport()) {
          oprot.writeString(struct.hostport);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecoveryClientServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.clustername = iprot.readString();
          struct.setClusternameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.s4clustername = iprot.readString();
          struct.setS4clusternameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.listenappname = iprot.readString();
          struct.setListenappnameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.hostport = iprot.readString();
          struct.setHostportIsSet(true);
        }
      }
    }

  }

  public static class RecoveryClientServer_result implements org.apache.thrift.TBase<RecoveryClientServer_result, RecoveryClientServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecoveryClientServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecoveryClientServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecoveryClientServer_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecoveryClientServer_result.class, metaDataMap);
    }

    public RecoveryClientServer_result() {
    }

    public RecoveryClientServer_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecoveryClientServer_result(RecoveryClientServer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RecoveryClientServer_result deepCopy() {
      return new RecoveryClientServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RecoveryClientServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecoveryClientServer_result)
        return this.equals((RecoveryClientServer_result)that);
      return false;
    }

    public boolean equals(RecoveryClientServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecoveryClientServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecoveryClientServer_result typedOther = (RecoveryClientServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecoveryClientServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecoveryClientServer_resultStandardSchemeFactory implements SchemeFactory {
      public RecoveryClientServer_resultStandardScheme getScheme() {
        return new RecoveryClientServer_resultStandardScheme();
      }
    }

    private static class RecoveryClientServer_resultStandardScheme extends StandardScheme<RecoveryClientServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecoveryClientServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecoveryClientServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecoveryClientServer_resultTupleSchemeFactory implements SchemeFactory {
      public RecoveryClientServer_resultTupleScheme getScheme() {
        return new RecoveryClientServer_resultTupleScheme();
      }
    }

    private static class RecoveryClientServer_resultTupleScheme extends TupleScheme<RecoveryClientServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecoveryClientServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecoveryClientServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
